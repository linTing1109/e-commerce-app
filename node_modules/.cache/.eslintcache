[{"C:\\JavaPCSchool3\\e-commerce-app\\src\\index.js":"1","C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\SalesReportHooks.js":"2","C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\SalesReportSetState.js":"3","C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\SalesReportLifeCycle.js":"4","C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\MemberLogic.js":"5","C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\GoodsCreate.js":"6","C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\GoodsReplenishment.js":"7","C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\QueryCarGoods.js":"8","C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\GoodsList.js":"9","C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\SearchGoods.js":"10","C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\PageControlBar.js":"11","C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\MemberLogicOut.js":"12","C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\EcommerceRouterDom.js":"13","C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\ClearCarGoods.js":"14","C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\MemberCheck.js":"15","C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\ErrorPage.js":"16","C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\CheckOutGoods.js":"17","C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\SearchName.js":"18","C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\CarGoods.js":"19"},{"size":2162,"mtime":1684602050742,"results":"20","hashOfConfig":"21"},{"size":13678,"mtime":1684783096964,"results":"22","hashOfConfig":"21"},{"size":6848,"mtime":1683923231469,"results":"23","hashOfConfig":"21"},{"size":14919,"mtime":1684085093196,"results":"24","hashOfConfig":"21"},{"size":6304,"mtime":1684859137069,"results":"25","hashOfConfig":"21"},{"size":5362,"mtime":1684516195037,"results":"26","hashOfConfig":"21"},{"size":9010,"mtime":1684516981963,"results":"27","hashOfConfig":"21"},{"size":10842,"mtime":1684781870086,"results":"28","hashOfConfig":"21"},{"size":12585,"mtime":1684691513502,"results":"29","hashOfConfig":"21"},{"size":13687,"mtime":1684784174418,"results":"30","hashOfConfig":"21"},{"size":145,"mtime":1684523093208,"results":"31","hashOfConfig":"21"},{"size":1459,"mtime":1684598750764,"results":"32","hashOfConfig":"21"},{"size":12034,"mtime":1684849844171,"results":"33","hashOfConfig":"21"},{"size":906,"mtime":1684683850027,"results":"34","hashOfConfig":"21"},{"size":1277,"mtime":1684599565576,"results":"35","hashOfConfig":"21"},{"size":808,"mtime":1684584217231,"results":"36","hashOfConfig":"21"},{"size":6288,"mtime":1684781710410,"results":"37","hashOfConfig":"21"},{"size":1329,"mtime":1684656343234,"results":"38","hashOfConfig":"21"},{"size":1295,"mtime":1684661674475,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},"shh846",{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":1,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"53"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"53"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"53"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"53"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"53"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"53"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"53"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"53"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"53"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"53"},"C:\\JavaPCSchool3\\e-commerce-app\\src\\index.js",["112","113","114","115","116","117","118","119","120","121","122"],[],"import React from 'react';\nimport ReactDOM from 'react-dom';\n// import ReactDOM from 'react-dom/client';\n\nimport SalesReportSetState from './Homework/SalesReportSetState';\nimport SalesReportSalesReportLifeCycle from './Homework/SalesReportLifeCycle';\nimport GoodsCreate from './Homework/GoodsCreate';\nimport GoodsReplenishment from './Homework/GoodsReplenishment';\nimport GoodsList from './Homework/GoodsList';\nimport SalesReportHooks from './Homework/SalesReportHooks';\nimport MemberLogic from './Homework/MemberLogic';\nimport SearchGoods from './Homework/SearchGoods';\n//這三個不會用到 最後可以刪掉\n// import AddGoodsCar from './Homework/AddGoodsCar';\n// import CarGoodsPage from './Homework/CarGoodsPage';\n// import AddGoodsCar2 from './Homework/AddGoodsCar2';\nimport QueryCarGoods from './Homework/QueryCarGoods';\nimport MemberLogicOut from './Homework/MemberLogicOut';\nimport EcommerceRouterDom from './Homework/EcommerceRouterDom';\nimport PageControlBar from './Homework/PageControlBar';\n\n\n// ReactDOM.render(<SalesReportSetState/> ,document.getElementById('app'));\n// ReactDOM.render(<SalesReportSalesReportLifeCycle/> ,document.getElementById('app'));\n// ReactDOM.render(<GoodsCreate/> ,document.getElementById('app'));\n// ReactDOM.render(<GoodsReplenishment/> ,document.getElementById('app'));\n// ReactDOM.render(<GoodsList/> ,document.getElementById('app'));\n// ReactDOM.render(<SalesReportHooks/> ,document.getElementById('app'));\n// ReactDOM.render(<MemberLogic/> ,document.getElementById('app'));\n// ReactDOM.render(<SearchGoods/> ,document.getElementById('app'));\n// ReactDOM.render(<AddGoodsCar/> ,document.getElementById('app')); //只是在寫測試加入購物車使用\n// ReactDOM.render(<CarGoodsPage/> ,document.getElementById('app'));\n// ReactDOM.render(<AddGoodsCar2/> ,document.getElementById('app'));\n// ReactDOM.render(<QueryCarGoods/> ,document.getElementById('app')); \n// ReactDOM.render(<MemberLogicOut/> ,document.getElementById('app'));\nReactDOM.render(<EcommerceRouterDom/> ,document.getElementById('app'));\n// ReactDOM.render(<PageControlBar/> ,document.getElementById('app')); //最下方頁碼控制 還沒寫完\n\n",[],"C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\SalesReportHooks.js",["123","124","125","126","127","128","129","130","131","132","133"],[],"import React ,{useState,useEffect} from 'react'\r\nimport axios from \"axios\";\r\nimport picAsc from './pic/pic1.png';\r\nimport picDesc from './pic/pic2.png';\r\nimport picAll from './pic/pic3.png';\r\n\r\n//商品訂單列表api\r\nconst apiUrl = 'http://localhost:8090/training/ecommerce/BackendController/queryGoodsSales';\r\n\r\n// 功能:後臺全部訂單頁面\r\nconst SalesReportHooks = () => {\r\n\r\n    // 這邊是使用當日日期換算 六個月前的資料:\r\n    const date = new Date();//取得當天日期\r\n    const month = date.getMonth() + 1;//因為起始月:0開始 所以+1\r\n    const endMonth = month < 10 ? `0${month}` : month; //當日月份:需判斷是否有0的\r\n    const startMonth = month-6 < 1 ? month-6+12 : month-6;//上半年月份:需判斷是否跨年\r\n    const dateStartMonth = startMonth <10 ? `0${startMonth}` : startMonth;//當日日期:需判斷是否有0的\r\n    const startYear = month-6 < 1 ? date.getFullYear()-1 :date.getFullYear();//上半年年份:需判斷是否跨年\r\n    const endYear = date.getFullYear();//當日年份不需要變動\r\n    const nowday = date.getDate();\r\n    const dateDay= nowday <10 ?  `0${nowday}` : nowday;\r\n    const dateSText = `${startYear}-${dateStartMonth}-${dateDay}`;//組成開始的日期\r\n    const dateEText = `${endYear}-${endMonth}-${dateDay}`;//組成結束的日期\r\n    \r\n    \r\n    const [data, setData] = useState({\r\n\r\n        // 各欄位的初始化:每頁十筆 頁碼按鈕5個 近半年~當日\r\n        // reportData: null,\r\n        currentPageNo:1,\r\n        pageDataSize:10,\r\n        pagesIconSize:5,\r\n        startDate:dateSText, //預設傳入的是查詢當日~前六個月\r\n        endDate:dateEText,//預設傳入的是查詢當日~前六個月\r\n        orderByItem :'orderID', //預設就是用訂單編號排\r\n        sort:'ASC',\r\n        // //起始&結束日期 是否有選擇了 控制觸發使用\r\n        // searchStart:false,\r\n        // searchEnd:false,\r\n\r\n         //回傳結果\r\n         goodsReportSalesList: null, //放查詢回來的結果\r\n         genericPageable: null,//放查詢回來相關頁碼資料使用\r\n        \r\n        //控制各欄位排序顯示圖片\r\n        imagePicOrderID:picAsc,\r\n        imagePicOrderDate:picAll,\r\n        imagePicOrderCusName:picAll,\r\n        imagePicOrderGoodID:picAll,\r\n        imagePicOrderGoodName:picAll,\r\n        imagePicOrderGoodPrice:picAll,\r\n        imagePicOrderBuyQuantity:picAll,\r\n    });\r\n\r\n    // 解構 \r\n    const {currentPageNo,pageDataSize,pagesIconSize,startDate,endDate,sort,orderByItem,\r\n        // searchStart,searchEnd,\r\n        goodsReportSalesList,genericPageable,\r\n        imagePicOrderID,imagePicOrderDate,imagePicOrderCusName,imagePicOrderGoodID,\r\n        imagePicOrderGoodName,imagePicOrderGoodPrice,imagePicOrderBuyQuantity} =data ;\r\n   \r\n    // 變更PageDataSize\r\n    const changePageDataSize = (even)  => { \r\n        setData( e => ({\r\n            ...e, //hooks無法部分更新,加...e為保持原先欄位\r\n            pageDataSize:even.target.value}));\r\n    }\r\n    \r\n     // 變更PagesIconSize\r\n    const changePagesIconSize = (even)  => {\r\n    setData( e => ({\r\n        ...e,//hooks無法部分更新,加...e為保持原先欄位\r\n        pagesIconSize:even.target.value}));\r\n    }\r\n\r\n    // 變更startDate\r\n    const changeStartDate = (even)  => {\r\n        setData( e => ({\r\n            ...e,//hooks無法部分更新,加...e為保持原先欄位\r\n            startDate:even.target.value,\r\n            // searchStart:true\r\n        }));\r\n    }\r\n\r\n    // 變更endDate\r\n    const changeEndDate = (even)  => {\r\n        setData( e => ({\r\n            ...e,//hooks無法部分更新,加...e為保持原先欄位\r\n            endDate:even.target.value,\r\n            // searchEnd:true\r\n        }));\r\n    }\r\n\r\n    // 最首頁點擊\r\n    const clickPageStart = (even)  => {\r\n        setData( e => ({\r\n            ...e,//hooks無法部分更新,加...e為保持原先欄位\r\n            currentPageNo:1}));\r\n    }\r\n\r\n    // 最末頁點擊\r\n    const clickPageEnd = (even)  => {\r\n        setData( e => ({\r\n            ...e,//hooks無法部分更新,加...e為保持原先欄位\r\n            currentPageNo:genericPageable.endPageNo}));\r\n    }\r\n\r\n\r\n    // 前一頁點擊\r\n    const clickPageSub = (even)  => {\r\n        setData( e => ({\r\n            ...e,//hooks無法部分更新,加...e為保持原先欄位\r\n            currentPageNo: currentPageNo-1}));\r\n    }\r\n\r\n\r\n    // 下一頁點擊\r\n    const clickPageAdd = ()  => {\r\n        setData( e => ({\r\n            ...e,//hooks無法部分更新,加...e為保持原先欄位\r\n            currentPageNo: currentPageNo+1}));\r\n    }\r\n\r\n    // 每個頁面上的點擊\r\n    const clickPage = (pageNo)  => {\r\n        setData( e => ({\r\n            ...e,//hooks無法部分更新,加...e為保持原先欄位\r\n            currentPageNo: pageNo}));\r\n    }\r\n\r\n    // 日期搜尋\r\n    const clickSearch = ()  => {\r\n        fetchList();\r\n        setData( e => ({\r\n            ...e,//hooks無法部分更新,加...e為保持原先欄位\r\n            currentPageNo: 1,//當重新查詢時候 頁面從第一頁開始顯示\r\n            //重新搜尋 將排序預定為訂單ID並且是ASC\r\n            sort:'ASC',\r\n            orderByItem :'orderID',\r\n            imagePicOrderID: picAsc, \r\n            imagePicOrderDate: picAll,\r\n            imagePicOrderCusName:picAll,\r\n            imagePicOrderGoodID:picAll,\r\n            imagePicOrderGoodName:picAll,\r\n            imagePicOrderGoodPrice:picAll,\r\n            imagePicOrderBuyQuantity: picAll,\r\n\r\n        })); \r\n    }\r\n\r\n    \r\n    // 各欄位排序圖片狀態顯示:(在input那邊需要搭配箭頭函式才可以使用)\r\n    const clickSortOrder = (even) => {\r\n        // const { sort } = this.state;\r\n        const newSort = sort === \"ASC\" ? \"DESC\" : \"ASC\"; // 點擊 ASC & DESC 互換\r\n        const imageValue = sort === \"ASC\" ? picDesc : picAsc; // 判斷變圖\r\n        const imagePicAll = picAll; // 原圖\r\n        setData( e => ({\r\n            ...e,//hooks無法部分更新,加...e為保持原先欄位\r\n            sort: newSort ,\r\n            // 傳給後端的值:因為後端訂單編號的順序跟日期順序是一樣的 沒有額外寫date排序\r\n            orderByItem:even.target.name ==='orderDate'? 'orderID':even.target.name,\r\n            \r\n            //依照排序條件動態抽換圖片\r\n            imagePicOrderBuyQuantity:even.target.name=== 'buyQuantity' ? imageValue : imagePicAll,\r\n            imagePicOrderID:even.target.name === 'orderID' ? imageValue : imagePicAll, //even.target.name為的是要原本的觸發條件不要上面的\r\n            imagePicOrderDate:even.target.name === 'orderDate' ? imageValue : imagePicAll,//even.target.name為的是要原本的觸發條件不要上面的\r\n            imagePicOrderCusName:even.target.name === 'customerName' ? imageValue : imagePicAll,\r\n            imagePicOrderGoodID:even.target.name === 'goodsID' ? imageValue : imagePicAll,\r\n            imagePicOrderGoodName:even.target.name === 'goodsName' ? imageValue : imagePicAll,\r\n            imagePicOrderGoodPrice:even.target.name === 'goodsBuyPrice' ? imageValue : imagePicAll,\r\n\r\n        }));\r\n    }\r\n        \r\n      \r\n    useEffect(() => {\r\n        fetchList();//componentDidMount\r\n    },[currentPageNo,sort,orderByItem]);// componentDidUpdate:頁碼,升降冪,排序方式\r\n\r\n    // 後端api\r\n    const fetchList = async() => {\r\n        const params =  { \"currentPageNo\": currentPageNo, \"pageDataSize\": pageDataSize, \"pagesIconSize\": pagesIconSize\r\n        , \"startDate\": startDate, \"endDate\":endDate, \"orderByItem\": orderByItem,\"sort\": sort,\r\n        };\r\n        const reportData = await axios.get(apiUrl, { params })\r\n            .then(rs => rs.data)\r\n            .catch(error => { console.log(error); });\r\n        //判斷式原因是: 避免api傳回空值 塞值時 導致傳入有誤 進而引發畫面為空\r\n        if (reportData && reportData.goodsReportSalesList && reportData.genericPageable) {\r\n            setData( e => ({\r\n                    ...e,//hooks無法部分更新,加...e為保持原先欄位\r\n                    // reportData,\r\n                    goodsReportSalesList: reportData.goodsReportSalesList, \r\n                    genericPageable: reportData.genericPageable\r\n                }));\r\n        }  else { \r\n            setData( e => ({\r\n                ...e,//hooks無法部分更新,加...e為保持原先欄位\r\n                // reportData,\r\n                goodsReportSalesList: '', \r\n                genericPageable: ''\r\n            }));\r\n        }     \r\n    };\r\n\r\n    \r\n    return (\r\n        <div>\r\n            <h3>訂單查詢</h3>\r\n            {/* {!(searchStart && searchEnd) ? :null}   */}\r\n\r\n            {/* <div>預設:當日~前半個月的,修改時:起訖日皆有選擇時,才可以搜尋喔!</div>     */}\r\n            <label>查詢日期起：</label> <input type='date' onChange={changeStartDate} value={startDate}/>\r\n            <label style={{ marginLeft: '20px' }} />\r\n            <label>查詢日期迄：</label> <input type='date' onChange={changeEndDate} value={endDate}/>\r\n            \r\n\r\n            <label style={{ marginLeft: '20px' }} />\r\n            {/* 起訖日皆有選擇時 查詢按鈕才可以點選 disabled={!(searchStart && searchEnd)}*/}\r\n            <button onClick={clickSearch} >查詢</button>\r\n           \r\n            <br />\r\n            <label>\r\n                    pageDataSize: <input type='number' onChange={changePageDataSize} />\r\n                    pagesIconSize: <input type='number'onChange={changePagesIconSize}/>\r\n            </label>\r\n            {/* 前提條件需要 goodsReportSalesList &  genericPageable 有值才會顯示表格 */}\r\n            {goodsReportSalesList && genericPageable &&\r\n                <div>\r\n                <table border={'2'}>\r\n                    <thead>\r\n                        <tr>          \r\n                            <th>訂單編號<img src={imagePicOrderID} onClick={(event) => clickSortOrder(event)} name='orderID'/></th>\r\n                            <th>購買日期<img src={imagePicOrderDate} onClick={(event) => clickSortOrder(event)} name='orderDate'/></th> \r\n                            <th>顧客姓名<img src={imagePicOrderCusName}  onClick={(event) => clickSortOrder(event)} name='customerName'/></th>\r\n                            <th>商品編號<img src={imagePicOrderGoodID} onClick={(event) => clickSortOrder(event)} name='goodsID'/></th>\r\n                            <th>商品名稱<img src={imagePicOrderGoodName} onClick={(event) => clickSortOrder(event)} name='goodsName'/></th>\r\n                            <th>商品價格<img src={imagePicOrderGoodPrice} onClick={(event) => clickSortOrder(event)}  name='goodsBuyPrice'/></th>\r\n                            <th>購買數量<img src={imagePicOrderBuyQuantity} onClick={(event) => clickSortOrder(event)} name='buyQuantity'/></th>\r\n                            \r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {goodsReportSalesList.map((item, index) => (\r\n                        <tr key={item.orderID}> \r\n                        \r\n                        <td>{item.orderID}</td>                      \r\n                        <td>{new Date(item.orderDate).toLocaleString()}</td>\r\n                        {/* 將字串轉換成符合當地環境日期格式 */}\r\n                        {/* <td>{item.customerID}</td> */}\r\n                        <td>{item.customerName}</td>\r\n                        <td>{item.goodsID}</td>\r\n                        <td>{item.goodsName}</td>\r\n                        <td>{item.goodsBuyPrice}</td>\r\n                        <td>{item.buyQuantity}</td>\r\n                        \r\n                        </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n                <hr/> \r\n                <div>\r\n                \r\n                    \r\n                    <button disabled={genericPageable.currentPageNo ==1}\r\n                    onClick={() => clickPageStart()}>{'<<'}</button>\r\n                    <button disabled={genericPageable.currentPageNo <2}\r\n                    onClick={() => clickPageSub()}>{'<'}</button>\r\n                    \r\n                    {genericPageable.pagination.map((pageNo, index) => (\r\n                        \r\n                        <span key={index}>\r\n                            \r\n                        <button onClick={() => clickPage(pageNo)}>\r\n                            {/* 如果為當前頁面 粗體&下底線 */}\r\n                            {currentPageNo ===pageNo ?<b><u>{pageNo}</u></b> :pageNo}\r\n                        </button>\r\n                        </span>\r\n                    ))}\r\n\r\n                    <button disabled={genericPageable.currentPageNo >= genericPageable.endPageNo } \r\n                    onClick={() => clickPageAdd()}>{'>'}</button>\r\n\r\n                    <button disabled={currentPageNo==genericPageable.endPageNo  }\r\n                    onClick={() => clickPageEnd()}>{'>>'}</button>\r\n                </div> \r\n                </div>\r\n                }\r\n        <hr/>    \r\n        Hooks 測試資料用:<br/>\r\n        startDate:{startDate}<br/>\r\n        endDate:{endDate}<br/>\r\n        currentPageNo:{currentPageNo}<br/>\r\n        pageDataSize:{pageDataSize}<br/>\r\n        pagesIconSize:{pagesIconSize}<br/>\r\n        sort:{sort}<br/>\r\n        orderByItem:{orderByItem}<br/>\r\n        {/* imagePicOrderID:<img src={imagePicOrderID}></img><br/> */}\r\n        {/* {goodsReportSalesList} */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SalesReportHooks\r\n","C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\SalesReportSetState.js",["134","135","136","137"],[],"import React, { Component } from 'react';\nimport axios from \"axios\";\n\n// const apiUrl = 'http://localhost:8090/ecommerce/BackendController/queryGoodsSales';\nconst apiUrl = 'http://localhost:8090/training/ecommerce/BackendController/queryGoodsSales';\n\nclass SalesReportSetState extends Component {\n    \n    \n    constructor(props) {\n        \n        super(props);\n        this.state = {\n          reportData: null,\n          goodsReportSalesList: null,\n          genericPageable: null,\n          currentPageNo:1,\n          \n          pageDataSize:2,\n          pagesIconSize:3,\n          startDate:'',\n          endDate:''\n        };\n    }\n\n    onClickSearch = async (event) => {\n        \n        // const params =  { \"currentPageNo\": 1, \"pageDataSize\": 2, \"pagesIconSize\": 2, \"startDate\": \"2023/01/01\", \"endDate\": \"2023/05/31\" };\n        \n        const params =  { \"currentPageNo\": this.state.currentPageNo, \"pageDataSize\": this.state.pageDataSize, \"pagesIconSize\": this.state.pagesIconSize, \"startDate\": this.state.startDate, \"endDate\": this.state.endDate };\n        \n        \n        const reportData = await axios.get(apiUrl, { params })\n            .then(rs => rs.data)\n            .catch(error => { console.log(error); });\n        \n\n        this.setState({ \n            reportData, \n            goodsReportSalesList: reportData.goodsReportSalesList, \n            genericPageable: reportData.genericPageable\n            \n        });\n\n        \n        console.log(\"goodsReportSalesList:\", reportData.goodsReportSalesList);\n        console.log(\"genericPageable:\", reportData.genericPageable);\n\n    };\n\n\n    onChangePageDataSize = (even)  => {\n        this.setState({\n            pageDataSize: parseInt(even.target.value),\n            \n        });\n    }\n\n    onChangePagesIconSize = (even)  => {\n        this.setState({         \n            pagesIconSize: parseInt(even.target.value)\n        });\n    }\n\n    onChangeStartDate = (even)  => {\n        this.setState({         \n            startDate: even.target.value\n        });\n    }\n\n    onChangeEndDate = (even)  => {\n        this.setState({         \n            endDate: even.target.value\n        });\n    }\n    onClickPage = (pageNo) => {\n        console.log(\"clickPage\",pageNo);\n         this.setState({ currentPageNo: pageNo }, \n        () => \n           this.onClickSearch()\n        )\n    };\n\n    onClickPageAdd = () => {\n        // 下一頁點擊\n         this.setState({ currentPageNo: this.state.currentPageNo+1}, \n        () => \n           this.onClickSearch()\n        )\n    };\n\n    onClickPageSub = () => {\n        // 前一頁點擊\n         this.setState({ currentPageNo: this.state.currentPageNo-1}, \n        () => \n           this.onClickSearch()\n        )\n    };\n\n    onClickPageStart = () => {\n        // 最首頁點擊\n         this.setState({ currentPageNo: 1}, \n        () => \n           this.onClickSearch()\n        )\n    };\n\n    onClickPageEnd = () => {\n        // 最末頁點擊\n         this.setState({ currentPageNo:this.state.genericPageable.endPageNo }, \n        () => \n           this.onClickSearch()\n        )\n    };\n   \n    render() {\n        const { goodsReportSalesList, genericPageable,pageDataSize,pagesIconSize,currentPageNo,startDate,endDate } = this.state;\n        \n        return (\n            <div>\n                <label>查詢日期起：</label> <input type='date' onChange={this.onChangeStartDate}/>\n                <label style={{ marginLeft: '20px' }} />\n                <label>查詢日期迄：</label> <input type='date' onChange={this.onChangeEndDate} />\n                \n                <label style={{ marginLeft: '20px' }} />\n                <button onClick={this.onClickSearch}>查詢</button>\n                <hr />\n                <label>\n                    pageDataSize: <input type='number' value={pageDataSize} onChange={this.onChangePageDataSize} />\n                    pagesIconSize: <input type='number' value={pagesIconSize} onChange={this.onChangePagesIconSize} />\n                </label>\n                <hr></hr>\n                \n                {goodsReportSalesList && genericPageable &&\n                <div>\n                <table border={'2'}>\n                    <thead>\n                        <tr>\n                            <th>訂單編號</th>\n                            <th>購買日期</th>\n                            <th>顧客姓名</th>\n                            <th>商品編號</th>\n                            <th>商品名稱</th>\n                            <th>商品價格</th>\n                            <th>購買數量</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {goodsReportSalesList.map((item, index) => (\n                        <tr key={item.orderID}> \n                        \n                        <td>{item.orderID}</td>                      \n                        <td>{new Date(item.orderDate).toLocaleString()}</td>\n                        {/* 將字串轉換成符合當地環境日期格式 */}\n                        {/* <td>{item.customerID}</td> */}\n                        <td>{item.customerName}</td>\n                        <td>{item.goodsID}</td>\n                        <td>{item.goodsName}</td>\n                        <td>{item.goodsBuyPrice}</td>\n                        <td>{item.buyQuantity}</td>\n                        \n                        </tr>\n                        ))}\n                    </tbody>\n                </table>\n                <hr/> \n                <div>\n                \n                    \n                    <button disabled={genericPageable.currentPageNo ==1}\n                    onClick={() => this.onClickPageStart()}>{'<<'}</button>\n                    <button disabled={genericPageable.currentPageNo <2}\n                    onClick={() => this.onClickPageSub()}>{'<'}</button>\n                    \n                    {genericPageable.pagination.map((pageNo, index) => (\n                        \n                        <span key={index}>\n                            \n                        <button onClick={() => this.onClickPage(pageNo)}>\n                            {/* 如果為當前頁面 粗體&下底線 */}\n                            {currentPageNo ===pageNo ?<b><u>{pageNo}</u></b> :pageNo}\n                        </button>\n                        </span>\n                    ))}\n\n                    <button disabled={genericPageable.currentPageNo >= genericPageable.endPageNo } \n                    onClick={() => this.onClickPageAdd()}>{'>'}</button>\n\n                    <button disabled={currentPageNo==genericPageable.endPageNo  }\n                    onClick={() => this.onClickPageEnd()}>{'>>'}</button>\n                </div> \n                </div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default SalesReportSetState;",[],"C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\SalesReportLifeCycle.js",["138","139","140","141","142","143","144","145","146","147","148"],[],"import React, { Component } from 'react';\nimport axios from \"axios\";\nimport picAsc from './pic/pic1.png';\nimport picDesc from './pic/pic2.png';\nimport picAll from './pic/pic3.png';\n\nconst apiUrl = 'http://localhost:8090/training/ecommerce/BackendController/queryGoodsSales';\n\nclass SalesReportLifeCycle extends Component {\n    \n    // 建構函式 設定初始化值\n    constructor(props) {\n        super(props);\n        this.state = {\n          reportData: null,\n          goodsReportSalesList: null,\n          genericPageable: null,\n          currentPageNo:1,\n          pageDataSize:5,\n          pagesIconSize:5,\n          startDate:'2023-01-01',\n          endDate:'2023-05-31',\n          orderByItem :'orderID', //預設就是用訂單編號排\n          sort:'ASC',\n          //控制各欄位排序顯示圖片\n          imagePicOrderID:picAsc,\n          imagePicOrderDate:picAll,\n          imagePicOrderCusName:picAll,\n          imagePicOrderGoodID:picAll,\n          imagePicOrderGoodName:picAll,\n          imagePicOrderGoodPrice:picAll,\n          imagePicOrderBuyQuantity:picAll,\n          //起始&結束日期 是否有選擇了 控制觸發使用\n          searchStart:false,\n          searchEnd:false,\n        \n        };\n    }\n\n    // 組件掛載:資料預先掛載\n    componentDidMount() {\n        this.fetchList(); \n    }\n    // 呼叫後端api部分\n    fetchList = async () => {\n        const params =  { \"currentPageNo\": this.state.currentPageNo, \"pageDataSize\": this.state.pageDataSize, \"pagesIconSize\": this.state.pagesIconSize\n        , \"startDate\": this.state.startDate, \"endDate\": this.state.endDate\n        , \"orderByItem\": this.state.orderByItem,\"sort\": this.state.sort};\n        const reportData = await axios.get(apiUrl, { params })\n            .then(rs => rs.data)\n            .catch(error => { console.log(error); });\n\n        //判斷式原因是: 避免api傳回空值 塞值時 導致傳入有誤 進而引發畫面為空\n        if (reportData && reportData.goodsReportSalesList && reportData.genericPageable) {\n            this.setState({ \n                reportData, \n                goodsReportSalesList: reportData.goodsReportSalesList, \n                genericPageable: reportData.genericPageable\n                \n            });\n        }  else { \n            this.setState({\n                reportData: '',\n                goodsReportSalesList: '',\n                genericPageable: ''\n            });\n        }  \n        // console.log(\"goodsReportSalesList:\", reportData.goodsReportSalesList);\n        // console.log(\"genericPageable:\", reportData.genericPageable);\n\n    };\n\n    // 組件更新:\n    componentDidUpdate(prevProps, prevState){\n        // console.log(prevProps.sort);\n        if(prevState.currentPageNo !== this.state.currentPageNo){\n            this.fetchList();\n        }\n        if(prevState.sort !== this.state.sort){\n            this.fetchList();\n        }\n        if(prevState.orderByItem !== this.state.orderByItem){\n            this.fetchList();\n        }\n\n    }\n    // 每個頁面上的點擊\n    onClickPage = (pageNo) => {\n        this.setState({\n            currentPageNo: pageNo\n        });\n    }\n\n    // 下一頁點擊\n    onClickPageAdd = () => {\n        this.setState({\n            currentPageNo: this.state.currentPageNo+1\n        });\n    }\n\n    // 前一頁點擊\n    onClickPageSub = () => {\n        this.setState({\n            currentPageNo: this.state.currentPageNo-1\n        });\n    }\n\n    // 最首頁點擊\n    onClickPageStart = () => {\n        this.setState({\n            currentPageNo:1\n        });\n    }\n\n    // 最末頁點擊\n    onClickPageEnd = () => {\n        this.setState({\n            currentPageNo:this.state.genericPageable.endPageNo\n        });\n    }\n\n    // 日期搜尋\n    onClickSearch = () => {\n        this.fetchList();\n        this.setState({\n            currentPageNo: 1, //重新按查詢時 將頁面倒回第一頁\n        });\n    }\n\n    // 變更PageDataSize\n    onChangePageDataSize = (even)  => {\n        this.setState({\n            pageDataSize: parseInt(even.target.value),\n        });\n    }\n\n    // 變更PagesIconSize\n    onChangePagesIconSize = (even)  => {\n        this.setState({         \n            pagesIconSize: parseInt(even.target.value)\n        });\n    }\n\n    // 變更起始日期\n    onChangeStartDate = (even)  => {\n        this.setState({         \n            startDate: even.target.value,\n            searchStart:true\n        });\n    }\n    // 變更結束日期\n    onChangeEndDate = (even)  => {\n        this.setState({         \n            endDate: even.target.value,\n            searchEnd:true\n        });\n    }\n\n    // updateSearchButtonState = () => {\n    //     const { startDate, endDate } = this.state;\n    //     const isSearchDisabled = !startDate || !endDate;\n    //     this.setState({ isSearchDisabled });\n    //   }\n\n    //訂單編號排序圖片顯示\n    onClickSortOrderID =(even) =>{\n        const{sort}=this.state;\n        const newSort = sort === 'ASC' ? 'DESC' : 'ASC'; //點擊ASC&DESC互換\n        const imageValue = sort === 'ASC'? picDesc:picAsc; //判斷變圖\n        this.setState({ \n            sort: newSort ,\n            orderByItem:even.target.name,//將排序條件更換\n            imagePicOrderID:imageValue,\n            imagePicOrderDate:picAll,//其餘的需要將圖變回原圖\n            imagePicOrderCusName:picAll,\n            imagePicOrderGoodID:picAll,\n            imagePicOrderGoodName:picAll,\n            imagePicOrderGoodPrice:picAll,\n            imagePicOrderBuyQuantity:picAll,\n        });\n    }\n    //訂單日期排序圖片顯示\n    onClickSortOrderDate =(even) =>{\n        const{sort}=this.state;\n        const newSort = sort === 'ASC' ? 'DESC' : 'ASC'; //點擊ASC&DESC互換\n        const imageValue = sort === 'ASC'? picDesc:picAsc; //判斷變圖\n        this.setState({ \n            sort: newSort ,\n            orderByItem:'orderID',//因為orderID& orderDate原理相同 springBoot合併寫一起用orderID判斷\n            imagePicOrderDate:imageValue,\n            imagePicOrderID:picAll,//其餘的需要將圖變回原圖\n            imagePicOrderCusName:picAll,\n            imagePicOrderGoodID:picAll,\n            imagePicOrderGoodName:picAll,\n            imagePicOrderGoodPrice:picAll,\n            imagePicOrderBuyQuantity:picAll,\n        });\n    }\n    //客戶姓名排序圖片顯示\n    onClickSortCusName =(even) =>{\n        const{sort}=this.state;\n        const newSort = sort === 'ASC' ? 'DESC' : 'ASC'; //點擊ASC&DESC互換\n        const imageValue = sort === 'ASC'? picDesc:picAsc; //判斷變圖\n        this.setState({ \n            sort: newSort ,\n            orderByItem:even.target.name,//將排序條件更換\n            imagePicOrderCusName:imageValue,\n            imagePicOrderDate:picAll,//其餘的需要將圖變回原圖\n            imagePicOrderID:picAll,\n            imagePicOrderGoodID:picAll,\n            imagePicOrderGoodName:picAll,\n            imagePicOrderGoodPrice:picAll,\n            imagePicOrderBuyQuantity:picAll,\n        });\n    }\n   //商品編號排序圖片顯示\n    onClickSortGoodID =(even) =>{\n        const{sort}=this.state;\n        const newSort = sort === 'ASC' ? 'DESC' : 'ASC'; //點擊ASC&DESC互換\n        const imageValue = sort === 'ASC'? picDesc:picAsc; //判斷變圖\n        this.setState({ \n            sort: newSort ,\n            orderByItem:even.target.name,//將排序條件更換\n            imagePicOrderGoodID:imageValue,\n            imagePicOrderDate:picAll,//其餘的需要將圖變回原圖\n            imagePicOrderID:picAll,\n            imagePicOrderCusName:picAll,\n            imagePicOrderGoodName:picAll,\n            imagePicOrderGoodPrice:picAll,\n            imagePicOrderBuyQuantity:picAll,\n        });\n    }\n    //商品名稱排序圖片顯示\n    onClickSortGoodName =(even) =>{\n        const{sort}=this.state;\n        const newSort = sort === 'ASC' ? 'DESC' : 'ASC'; //點擊ASC&DESC互換\n        const imageValue = sort === 'ASC'? picDesc:picAsc; //判斷變圖\n        this.setState({ \n            sort: newSort ,\n            orderByItem:even.target.name,//將排序條件更換\n            imagePicOrderGoodName:imageValue,\n            imagePicOrderDate:picAll,//其餘的需要將圖變回原圖\n            imagePicOrderID:picAll,\n            imagePicOrderCusName:picAll,\n            imagePicOrderGoodID:picAll,\n            imagePicOrderGoodPrice:picAll,\n            imagePicOrderBuyQuantity:picAll,\n        });\n    }\n    //商品價格排序圖片顯示\n    onClickSortGoodPrice =(even) =>{\n        const{sort}=this.state;\n        const newSort = sort === 'ASC' ? 'DESC' : 'ASC'; //點擊ASC&DESC互換\n        const imageValue = sort === 'ASC'? picDesc:picAsc; //判斷變圖\n        this.setState({ \n            sort: newSort ,\n            orderByItem:even.target.name,//將排序條件更換\n            imagePicOrderGoodPrice :imageValue,\n            imagePicOrderDate:picAll,//其餘的需要將圖變回原圖\n            imagePicOrderID:picAll,\n            imagePicOrderCusName:picAll,\n            imagePicOrderGoodID:picAll,\n            imagePicOrderGoodName:picAll,\n            imagePicOrderBuyQuantity:picAll,\n        });\n    }\n    //訂單數量排序圖片顯示\n    onClickSortBuyQuantity =(even) =>{\n        const{sort}=this.state;\n        const newSort = sort === 'ASC' ? 'DESC' : 'ASC'; //點擊ASC&DESC互換\n        const imageValue = sort === 'ASC'? picDesc:picAsc; //判斷變圖\n        this.setState({ \n            sort: newSort ,\n            orderByItem:even.target.name,//將排序條件更換\n            imagePicOrderBuyQuantity:imageValue,\n            imagePicOrderDate:picAll,//其餘的需要將圖變回原圖\n            imagePicOrderID:picAll,\n            imagePicOrderCusName:picAll,\n            imagePicOrderGoodID:picAll,\n            imagePicOrderGoodPrice:picAll,\n            imagePicOrderGoodName:picAll,\n        });\n    }\n    render() {\n        const { goodsReportSalesList, genericPageable,pageDataSize,pagesIconSize,currentPageNo,\n            startDate,endDate,imagePicOrderID,imagePicOrderDate,imagePicOrderCusName,imagePicOrderGoodID,\n            imagePicOrderGoodName,imagePicOrderGoodPrice,imagePicOrderBuyQuantity,sort,searchStart,searchEnd } = this.state;\n           \n        return (\n            <div>\n                <label>查詢日期起：</label> <input type='date' onChange={this.onChangeStartDate}/>\n                <label style={{ marginLeft: '20px' }} />\n                <label>查詢日期迄：</label> <input type='date' onChange={this.onChangeEndDate} />\n                \n                <label style={{ marginLeft: '20px' }} />\n                {/* 起訖日皆有選擇時 查詢按鈕才可以點選 */}\n                <button onClick={this.onClickSearch} disabled={!(searchStart && searchEnd)}>查詢</button>\n                <hr />\n                <label>\n                    pageDataSize: <input type='number' value={pageDataSize} onChange={this.onChangePageDataSize} />\n                    pagesIconSize: <input type='number' value={pagesIconSize} onChange={this.onChangePagesIconSize} />\n                    目前排序方式:{sort}\n                </label>\n                <hr/>\n                {/* 前提條件需要 goodsReportSalesList &  genericPageable 有值才會顯示表格 */}\n                {goodsReportSalesList && genericPageable &&\n                <div>\n                <table border={'2'}>\n                    <thead>\n                        <tr>\n                        \n                            <th>訂單編號<img src={imagePicOrderID} onClick={this.onClickSortOrderID} name='orderID'/></th>\n                            <th>購買日期<img src={imagePicOrderDate}  onClick={this.onClickSortOrderDate} name='orderDate'/></th>\n                            <th>顧客姓名<img src={imagePicOrderCusName} onClick={this.onClickSortCusName} name='customerName'/></th>\n                            <th>商品編號<img src={imagePicOrderGoodID} onClick={this.onClickSortGoodID} name='goodsID'/></th>\n                            <th>商品名稱<img src={imagePicOrderGoodName} onClick={this.onClickSortGoodName} name='goodsName'/></th>\n                            <th>商品價格<img src={imagePicOrderGoodPrice} onClick={this.onClickSortGoodPrice} name='goodsBuyPrice'/></th>\n                            <th>購買數量<img src={imagePicOrderBuyQuantity} onClick={this.onClickSortBuyQuantity} name='buyQuantity'/></th>\n                        </tr>\n                    </thead>\n                    \n                    <tbody>\n                        {goodsReportSalesList.map((item, index) => (\n                        <tr key={item.orderID}> \n                        \n                        <td>{item.orderID}</td>                      \n                        <td>{new Date(item.orderDate).toLocaleString()}</td>\n                        {/* 將字串轉換成符合當地環境日期格式 */}\n                        {/* <td>{item.customerID}</td> */}\n                        <td>{item.customerName}</td>\n                        <td>{item.goodsID}</td>\n                        <td>{item.goodsName}</td>\n                        <td>{item.goodsBuyPrice}</td>\n                        <td>{item.buyQuantity}</td>\n                        \n                        </tr>\n                        ))}\n                    </tbody>\n                    \n                </table>\n                <hr/> \n                <div>\n                \n                    \n                    <button disabled={genericPageable.currentPageNo ==1}\n                    onClick={() => this.onClickPageStart()}>{'<<'}</button>\n                    <button disabled={genericPageable.currentPageNo <2}\n                    onClick={() => this.onClickPageSub()}>{'<'}</button>\n                    \n                    {genericPageable.pagination.map((pageNo, index) => (\n                        \n                        <span key={index}>\n                            \n                        <button onClick={() => this.onClickPage(pageNo)}>\n                            {/* 如果為當前頁面 粗體&下底線 */}\n                            {currentPageNo ===pageNo ?<b><u>{pageNo}</u></b> :pageNo}\n                        </button>\n                        </span>\n                    ))}\n\n                    <button disabled={genericPageable.currentPageNo >= genericPageable.endPageNo } \n                    onClick={() => this.onClickPageAdd()}>{'>'}</button>\n\n                    <button disabled={currentPageNo==genericPageable.endPageNo  }\n                    onClick={() => this.onClickPageEnd()}>{'>>'}</button>\n                </div> \n                </div>\n                }\n               {/* 測試用:\n               <pre>{JSON.stringify(goodsReportSalesList, null, 2)}</pre> */}\n            </div>\n        );\n    }\n}\n\nexport default SalesReportLifeCycle;","C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\MemberLogic.js",["149","150","151","152","153","154"],[],"C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\GoodsCreate.js",["155","156","157","158","159"],[],"C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\GoodsReplenishment.js",["160","161","162","163","164","165","166","167","168"],[],"import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\n\r\n\r\n//查詢全部商品清單\r\nconst apiUrl = 'http://localhost:8090/training/ecommerce/BackendController/queryAllGoods';\r\n\r\n//單一商品清單(維護使用)\r\nconst apiUrl2 = 'http://localhost:8090/training/ecommerce/BackendController/queryGoodsByID';\r\n\r\n//更新商品\r\nconst apiUrl3 = 'http://localhost:8090/training/ecommerce/BackendController/updateGoods';\r\n\r\n// 功能:商品維護補貨(先查後台的全部商品 ->查個別商品 ->更新商品)\r\nclass GoodsReplenishment extends Component {\r\n\r\n    // 建構函式 設定初始化值\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n           \r\n            goodsData:[], // 全部商品\r\n            goods:[],//單一商品資訊\r\n            reviseReport:[],//修改後的資料\r\n\r\n            goodsName:'',      \r\n            description:'',\r\n            price:'',\r\n            quantity: '',\r\n            status:'1',\r\n            fileName:'',\r\n            fileNameNew:'',\r\n            goodQuantity:'',\r\n            goodsID: '',\r\n            addQuantity:''\r\n            // createReport:null,\r\n        };\r\n        \r\n    }\r\n    // 組件掛載:將全部商品資料預先載入\r\n    componentDidMount(){\r\n        this.fetchGoodsAllList();\r\n        // this.fetchGoods();\r\n        \r\n    }\r\n    \r\n    // 全部商品列表api\r\n    fetchGoodsAllList = async () => {\r\n        const data = await fetch(apiUrl).then(rs => rs.json());\r\n        this.setState({\r\n            goodsData: data,\r\n            goodsID: data[0].goodsID, //預設第一筆為預設資料\r\n            goodsName: data[0].goodsName,\r\n            description:data[0].description,\r\n            price:data[0].goodsPrice,\r\n            quantity:data[0].goodsQuantity,\r\n            status:data[0].status,\r\n            fileName:data[0].goodsImageName,\r\n        });\r\n    }\r\n\r\n    //選擇項目時 更新goodID 並呼叫單一商品api\r\n    onChangeSelect = (even)  => {\r\n        // console.log(\"測試0:\", this.state.goodsID);\r\n        this.setState({\r\n            goodsID: even.target.value\r\n            \r\n        });\r\n        // console.log(\"測試1:\", this.state.goodsID); \r\n        this.fetchGoods();\r\n    }\r\n\r\n    // 單一商品api\r\n    fetchGoods = async () => {\r\n        const params =  { \"goodsID\": this.state.goodsID};\r\n        const goodData = await axios.get(apiUrl2, { params })\r\n            .then(rs => rs.data)\r\n            .catch(error => { console.log(error); });\r\n        \r\n        this.setState({ //將商品更新內容\r\n            // goodsID: goodData.goodsID,\r\n            goodsName:goodData.goodsName,\r\n            description:goodData.description,\r\n            price:goodData.goodsPrice,\r\n            quantity:goodData.goodsQuantity,\r\n            status:goodData.status,\r\n            fileName:goodData.goodsImageName,\r\n        });\r\n\r\n    };\r\n\r\n    onChangeGoodName = (even)  => {\r\n        this.setState({\r\n            goodsName: even.target.value\r\n        });\r\n    }\r\n\r\n    onChangeDescription= (even)  => {\r\n        this.setState({description: even.target.value});\r\n    }\r\n\r\n    onChangePrice= (even)  => {\r\n        this.setState({price: even.target.value});\r\n    }\r\n\r\n    onChangeAddQuantity= (even)  => {\r\n        this.setState({addQuantity: even.target.value});\r\n    }\r\n\r\n    onChangeRadio = (e) => {\r\n        this.setState({ status: e.target.value})\r\n    };\r\n\r\n    onChangeImg = (event) => {\r\n        // 取得圖片名稱\r\n        this.setState({fileNameNew: event.target.files[0].name});\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        // console.log(\"4.componentDidUpdate 組件更新(Updating :更新)\");\r\n        // console.log(\"prevState userID:\", prevState.goodsID);\r\n        // console.log(\"state userID:\", this.state.goodsID);\r\n        if(prevState.goodsID !== this.state.goodsID){ //只要不等於代表有更換選擇項目 就重新取得單一商品內容\r\n            this.fetchGoods();\r\n        }\r\n    }\r\n\r\n    handleSubmit = async (event) => {\r\n        const { goodsID,goodsName, description,price,addQuantity,status,fileNameNew } = this.state;\r\n        // 防止瀏灠器預設submit跳頁\r\n        event.preventDefault(); \r\n        const form = event.currentTarget;\r\n        // const uploadFile=null;\r\n        // {form.uploadFile.files[0] != null ? uploadFile =form.uploadFile.files[0]:uploadFile =null};\r\n        const uploadFile = form.uploadFile.files[0];\r\n        // console.log(\"測試\",uploadFile);\r\n        const formData = new FormData();\r\n        formData.append('goodsID', goodsID);\r\n        formData.append('goodsName', goodsName);\r\n        formData.append('description', description);\r\n        formData.append('price', price);\r\n        formData.append('status', status);\r\n        formData.append('imageName', fileNameNew);\r\n\r\n        {addQuantity != '' ? formData.append('quantity', addQuantity):formData.append('quantity', 0)}//有可能沒有要補數\r\n        {fileNameNew != '' && formData.append('file', uploadFile)}//沒有新的檔案名稱 代表沒有更新檔案\r\n        \r\n        const reviseReport= await axios.post(apiUrl3, formData)\r\n        .then(rs => rs.data)\r\n        .catch(error => {console.log(\"error:\", error);} )\r\n\r\n        this.setState({\r\n            reviseReport,//更新後的資訊\r\n            goodsID:reviseReport.goodsID,\r\n            addQuantity:'', //更新完成後必須將要補貨的欄位清空\r\n        });\r\n\r\n    };\r\n\r\n    render() {\r\n        // const { ,createReport } = this.state;\r\n        const { goodsData,goodsName, description,price,quantity,fileName,status,goodsID,goods,addQuantity,reviseReport} = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <h3>商品維護補貨</h3>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    商品列表:\r\n                    <select onChange={this.onChangeSelect} >\r\n                        {\r\n                        goodsData.map( (o) => <option key={o.goodsID} value={o.goodsID}>\r\n                            <div>編號:{o.goodsID} /{o.goodsName}</div> \r\n                        </option> )\r\n                        }\r\n                    </select>\r\n                    <br/>\r\n                    商品名稱:\r\n                    <input type=\"text\" value={goodsName} placeholder=\"Enter Goods Name\" required onChange={this.onChangeGoodName}></input>\r\n                    <br/>\r\n                    商品描述(選填):\r\n                    <textarea value={description} rows=\"3\" placeholder=\"Enter Goods description\" onChange={this.onChangeDescription}></textarea>\r\n                    <br/>\r\n                    商品價格:\r\n                    <input type=\"number\" value={price} placeholder=\"Enter Goods price\" required onChange={this.onChangePrice}></input>\r\n                    <br/>    \r\n                    庫存數量:{quantity} \r\n                    <br/>\r\n                    補貨數量:\r\n                    <input type=\"number\" value={addQuantity} placeholder=\"Enter Add Quantity\" onChange={this.onChangeAddQuantity}></input>\r\n                    <br/>\r\n                    原始檔案:{fileName}<br/>\r\n                    <img src={`http://localhost:8090/training/goodsImg/${fileName}`} \r\n                    style={{ width: '200px', height: '150px' }} />  <br/>  \r\n                    圖片更改:<br/>\r\n                    \r\n                    <input type='file' name='uploadFile' onChange={this.onChangeImg}/>\r\n                    {/* onchange=\"validateImageFile(this); showFileName(this);\" */}\r\n                    <br/>\r\n                    商品狀態:\r\n                    <input type='radio' value={'1'}               \r\n                        checked={status == '1'}\r\n                        onChange={this.onChangeRadio}\r\n                    />\r\n                    <label>上架</label>\r\n\r\n                    <input type='radio' value={'0'}\r\n                            checked={status == '0'}\r\n                            onChange={this.onChangeRadio}\r\n                    />\r\n                    <label>下架</label>\r\n\r\n                    <br/>\r\n                    <button type=\"submit\">修改</button> \r\n                </form>\r\n\r\n                <hr/>\r\n               \r\n                {/* 利用三元判斷式 成功新增才秀出下面資訊 否則為空 */}\r\n                { reviseReport.length !=0 ? \r\n                    <div>\r\n                    商品編號:{goodsID}更新成功!<br/>\r\n                    修改後的內容為:<pre>{JSON.stringify(reviseReport, null, 2)}</pre>   \r\n                    </div>  :null\r\n                }        \r\n\r\n                {/* { reviseReport.length} */}\r\n                {/* 下面只是測試再用的<br/>\r\n                {goodsID}<br/>\r\n                \r\n                單一商品資訊:{goods}<br/>\r\n                庫存數量:{quantity}<br/> */}\r\n                   \r\n                \r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default GoodsReplenishment;","C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\QueryCarGoods.js",["169","170","171","172","173"],[],"import React, { useState, useEffect,useRef } from 'react'\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport ClearCarGoods from './ClearCarGoods';\r\nimport noGoodsBk from './pic/noGoodsBk.png';\r\n\r\n//查詢購物車商品 api\r\nconst apiUrl = 'http://localhost:8090/training/ecommerce/MemberController/queryCartGoods';\r\n\r\n// 功能:查詢購物車頁面\r\nconst QueryCarGoods = () => {\r\n    const navigate = useNavigate();\r\n\r\n    //填寫收件人資料用\r\n    const inputRefs = useRef([]);\r\n    const creditCardRefs = useRef([]);\r\n\r\n    const [data, setData] = useState({\r\n        queryGoodsData: [],\r\n        \r\n        //填寫信用卡用\r\n        creditCard:'',\r\n        effectiveDate:'',\r\n        lastNumber:'',\r\n\r\n        sendGoodsData:[],\r\n        // customerResult:'',\r\n        orderGoodsList:[],\r\n\r\n        //結帳用的收件人資料\r\n        customer :{ //api要傳入的資料\r\n            cusName:'',\r\n            homeNumber:'',\r\n            mobileNumber:'',\r\n            orderAddr:'',\r\n        },\r\n        \r\n    });\r\n\r\n    const { queryGoodsData,\r\n        cusName,homeNumber,mobileNumber,orderAddr,\r\n        creditCard,effectiveDate,lastNumber,\r\n        sendGoodsData,\r\n        orderGoodsList } = data;\r\n   \r\n\r\n    // 後端api :查詢購物車\r\n    const fetchList = async () => {\r\n        const queryGoodsData = await axios.get(apiUrl, { withCredentials: true })\r\n            .then(rs => rs.data)\r\n            .catch(error => { console.log(error); });\r\n\r\n        if (queryGoodsData) { //如果存在\r\n            setData(prevData => ({\r\n                ...prevData,\r\n                queryGoodsData: queryGoodsData,\r\n            }));\r\n        }\r\n    };\r\n\r\n    \r\n    useEffect(() => {\r\n        fetchList();\r\n    }, []);\r\n\r\n    const mergedData = Object.values(//Object.values 函式將 queryGoodsData 所有值取出來放入一個陣列中\r\n        queryGoodsData.reduce((result, item) => {\r\n            //queryGoodsData內不存在此ID 初始值為改為1 (備註:當初後端傳回來的json quantity為庫存 為了方便 直接覆蓋來使用)\r\n            if (!result[item.goodsID]) {  \r\n                result[item.goodsID] = { ...item, quantity: 1 };\r\n            } else { //若此ID已經存在 代表商品數量要加1\r\n                result[item.goodsID].quantity += 1;\r\n            }\r\n            return result;\r\n        }, {})\r\n    );\r\n    // reduce 接受兩個參數 (total累加,item當前值),0是初始值\r\n    const totalAmount = mergedData.reduce((total, item) => total + item.price * item.quantity, 0);\r\n\r\n    // 更改訂購者相關資料\r\n    const onChangeData = () => {\r\n        setData((prevState) => ({\r\n            ...prevState,\r\n            // carGoodsItem: carGoodsItem,\r\n            customer: {\r\n                cusName:inputRefs.current[0].value,\r\n                homeNumber:inputRefs.current[1].value,\r\n                mobileNumber:inputRefs.current[2].value,\r\n                orderAddr:inputRefs.current[3].value,\r\n            },\r\n            \r\n            })\r\n        ); \r\n\r\n    };\r\n\r\n    // 更改信用卡資料\r\n    const onChangeCreditCard = (index) => {\r\n        if (index <= 3 && creditCardRefs.current[index].value.length === 4) {\r\n          creditCardRefs.current[index + 1].focus();\r\n        }\r\n        if (index ==4 && creditCardRefs.current[index].value.length === 5) {\r\n            creditCardRefs.current[index + 1].focus();\r\n          }\r\n        setData((prevState) => ({\r\n            ...prevState,\r\n            // carGoodsItem: carGoodsItem,\r\n            creditCard:creditCardRefs.current[0].value+creditCardRefs.current[1].value+creditCardRefs.current[2].value+creditCardRefs.current[3].value,\r\n            effectiveDate:creditCardRefs.current[4].value,\r\n            lastNumber:creditCardRefs.current[5].value,\r\n            })\r\n        ); \r\n      };  \r\n        \r\n    \r\n    // 送出訂單 導入至購買頁面CheckOutGoods 頁面 並將客戶資料傳過去\r\n    const sendOrder = () => {\r\n        navigate(\"/CheckOutGoods\",{state:data});\r\n    };\r\n\r\n    const clearData = () => {\r\n        setData((prevState) => ({\r\n            ...prevState,\r\n            queryGoodsData:[],\r\n            })\r\n        ); \r\n\r\n    };    \r\n\r\n    return (\r\n        <div>\r\n            <h3>購物車商品清單</h3>\r\n            {/* <hr /> */}\r\n\r\n            {mergedData.length <= 0 && \r\n            <div>\r\n                <h3>尚未有購物車商品 請加入商品</h3>\r\n                <img src ={noGoodsBk} style={{ width: '300px', height: '300px' }}/>\r\n                {/* {setTimeout(() => { */}\r\n\r\n                {/* {navigate('/SearchGoods')} */}\r\n                {/* }, 500);} // 延遲0.5秒後執行 API 請求 只是要展顯出畫面的效果 */}\r\n            </div>\r\n            }\r\n\r\n\r\n            {mergedData.length > 0 &&\r\n                <div>\r\n                    <table border={'2'}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>商品編號</th>\r\n                                <th>商品圖片</th>\r\n                                <th>商品名稱</th>\r\n                                <th>商品價格</th>\r\n                                <th>商品數量</th>\r\n                                <th>商品小計</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {mergedData.map((item, index) => (\r\n                                <tr key={item.goodsID}>\r\n                                    <td>{item.goodsID}</td>\r\n                                    <td>\r\n                                        <img\r\n                                            src={`http://localhost:8090/training/goodsImg/${item.imageName}`}\r\n                                            style={{ width: '100px', height: '75px' }}\r\n                                            alt=\"Goods Image\"\r\n                                        />\r\n                                    </td>\r\n                                    <td>{item.goodsName}</td>\r\n                                    <td>{item.price}</td>\r\n                                    <td>{item.quantity}</td>\r\n                                    <td>{item.price * item.quantity}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                    結帳總額:{totalAmount}\r\n                   <ClearCarGoods onClick={clearData}/>     \r\n\r\n                    <hr/>\r\n                    填寫收件人資料<br/>\r\n                    姓名:<input type=\"text\" ref={el => (inputRefs.current[0] = el)} onChange={onChangeData}/><br/>\r\n                    手機號碼:<input type=\"text\" ref={el => (inputRefs.current[1] = el)} onChange={onChangeData}/><br/>\r\n                    連絡電話:<input type=\"text\" ref={el => (inputRefs.current[2] = el)} onChange={onChangeData}/><br/>\r\n                    收件地址:<input type=\"text\" ref={el => (inputRefs.current[3] = el)} onChange={onChangeData}/><br/>\r\n\r\n                    <hr/>     \r\n                    填寫信用卡資料<br/>\r\n                    信用卡號:\r\n                    <input type=\"text\" ref={(el) => (creditCardRefs.current[0] = el)}\r\n                                        onChange={() => onChangeCreditCard(0)}\r\n                                        maxLength={4} style={{ width: '55px' }} />\r\n                    -<input type=\"text\" ref={(el) => (creditCardRefs.current[1] = el)}\r\n                                        onChange={() => onChangeCreditCard(1)}\r\n                                        maxLength={4} style={{ width: '55px' }} />\r\n                    -<input type=\"text\" ref={(el) => (creditCardRefs.current[2] = el)}\r\n                                        onChange={() => onChangeCreditCard(2)}\r\n                                        maxLength={4} style={{ width: '55px' }} />\r\n                    -<input type=\"text\" ref={(el) => (creditCardRefs.current[3] = el)}\r\n                                        onChange={() => onChangeCreditCard(3)}\r\n                                        maxLength={4} style={{ width: '55px' }} />\r\n                    {/* <input type=\"number\" ref={el => (creditCardRefs.current[0] = el)} onBlur={onChangeCreditCard} style={{ width: '55px' }} />\r\n                    -<input type=\"number\" ref={el => (creditCardRefs.current[1] = el)} onBlur={onChangeCreditCard} style={{ width: '55px' }} />\r\n                    -<input type=\"number\" ref={el => (creditCardRefs.current[2] = el)} onBlur={onChangeCreditCard} style={{ width: '55px' }}/>\r\n                    -<input type=\"number\" ref={el => (creditCardRefs.current[3] = el)} onBlur={onChangeCreditCard} style={{ width: '55px' }}/> */}\r\n                    <br/>\r\n                    有效日期:\r\n                    {/* ref={el => (creditCardRefs.current[4] = el)} onChange={onChangeCreditCard} */}\r\n                    {/* <input tyep=\"text\" ref={el => (creditCardRefs.current[4] = el)} onBlur={onChangeCreditCard} style={{ width: '80px' }} />(範例格式: 03/25)<br/> */}\r\n                    <input tyep=\"text\" ref={(el) => (creditCardRefs.current[4] = el)}\r\n                                        onChange={() => onChangeCreditCard(4)}\r\n                                        maxLength={5} style={{ width: '80px' }} />(範例格式: 03/25)<br/>\r\n                    背面末三碼:\r\n                    {/* <input tyep=\"number\" ref={el => (creditCardRefs.current[5] = el)} onBlur={onChangeCreditCard} style={{ width: '80px' }}/><br/> */}\r\n                    <input tyep=\"number\" ref={(el) => (creditCardRefs.current[5] = el)}\r\n                                        onChange={() => onChangeCreditCard(5)}\r\n                                        maxLength={3} style={{ width: '80px' }}/><br/>\r\n                    <button onClick={sendOrder} >送出訂單</button>\r\n                    \r\n                    \r\n                    <hr/>            \r\n                    這邊只是測試使用:<br/>\r\n\r\n                    cusName:{cusName}<br/>\r\n                    homeNumber:{homeNumber}<br/>\r\n                    mobileNumber:{mobileNumber}<br/>\r\n                    orderAddr:{orderAddr}<br/>\r\n\r\n                    creditCard:{creditCard}<br/>\r\n                    effectiveDate: {effectiveDate}<br/>\r\n                    lastNumber:{lastNumber}<br/>\r\n{/*                                  \r\n                    新增內容為:<pre>{JSON.stringify(customer, null, 2)}</pre>           \r\n                    新增內容為:<pre>{JSON.stringify(orderGoodsList, null, 2)}</pre>         */}\r\n\r\n\r\n                </div>\r\n            //這個不要不小心刪掉 是判斷式的尾巴 \r\n            }\r\n\r\n            \r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QueryCarGoods\r\n","C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\GoodsList.js",["174","175","176","177","178","179","180","181","182","183"],[],"import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport picAsc from './pic/pic1.png';\r\nimport picDesc from './pic/pic2.png';\r\nimport picAll from './pic/pic3.png';\r\n\r\n//查詢商品列表api\r\nconst apiUrl = 'http://localhost:8090/training/ecommerce/BackendController/queryGoodsData';\r\n\r\n// 功能:後臺商品頁面\r\nclass GoodsList extends Component {\r\n    // 建構函式 設定初始化值\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            //頁碼\r\n            currentPageNo :1, \r\n            pageDataSize:10,\r\n            pagesIconSize:5,\r\n            //頁面輸入欄位\r\n            goodsID:null,\r\n            goodsName: null,\r\n            quantity:null,\r\n            startPrice:null,\r\n            endPrice:null,\r\n            status : null,\r\n            //回傳結果\r\n            listReport:[],\r\n            genericPageable:[],\r\n            goodsDatas:[],\r\n            //排序\r\n            orderByItem :'goodsID', //預設就是用商品編號排 所以只有imagePicGoodID:picAsc\r\n            sort:'ASC',\r\n            //各欄位圖片預設\r\n            imagePicGoodID:picAsc,\r\n            imagePicGoodName:picAll,\r\n            imagePicGoodPrice:picAll,\r\n            imagePicBuyQuantity:picAll,\r\n            imagePicStatus:picAll,\r\n        };\r\n        \r\n    }\r\n\r\n    // 呼叫後端api:查詢商品列表\r\n    fetchList = async () => {\r\n        const { currentPageNo, pageDataSize,pagesIconSize,goodsID,goodsName,quantity,startPrice,endPrice,status,orderByItem,sort} = this.state;\r\n\r\n        const params =  { \r\n        'currentPageNo': currentPageNo,'pageDataSize': pageDataSize,'pagesIconSize': pagesIconSize,'goodsID': goodsID,'goodsName': goodsName,\r\n        'quantity': quantity,'status': status,'startPrice': startPrice,'endPrice': endPrice,'orderByItem': orderByItem,'sort': sort};\r\n\r\n        const listReport = await axios.get(apiUrl, { params })\r\n            .then(rs => rs.data)\r\n            .catch(error => { console.log(error); });\r\n        \r\n        this.setState({ \r\n            listReport,\r\n            genericPageable:listReport.genericPageable,\r\n            goodsDatas:listReport.goodsDatas,\r\n            \r\n        });\r\n\r\n\r\n    };\r\n\r\n    // 組件掛載:資料預先掛載 查沒有任何條件的全部商品\r\n    componentDidMount() {\r\n        this.fetchList(); \r\n    }\r\n\r\n     // 組件更新: 目前頁面 單頁顯示筆數 排序方式 升降冪  (顯示頁碼數沒有寫可變 所以這邊沒有)\r\n     componentDidUpdate(prevProps, prevState){\r\n        if(prevState.currentPageNo !== this.state.currentPageNo){\r\n            this.fetchList();\r\n        }\r\n        if(prevState.pageDataSize !== this.state.pageDataSize){\r\n            this.fetchList();\r\n        }\r\n        if(prevState.sort !== this.state.sort){\r\n            this.fetchList();\r\n        }\r\n        if(prevState.orderByItem !== this.state.orderByItem){\r\n            this.fetchList();\r\n        }\r\n    }\r\n\r\n\r\n    onClickSumit = () => {\r\n        this.setState({\r\n            currentPageNo: 1  //重新按查詢會從第一頁開始顯示\r\n        })\r\n        \r\n        this.fetchList();\r\n    }\r\n\r\n    onChangePageDataSize = (even) => {\r\n        this.setState({\r\n            pageDataSize: even.target.value,\r\n            currentPageNo:1//避免已經選到後面頁面導致畫面有空資料\r\n        })\r\n        \r\n    };\r\n\r\n    \r\n    onChangeGoodsID = (even) => {\r\n        this.setState({\r\n            goodsID: even.target.value\r\n        })\r\n    };\r\n\r\n    onChangeGoodsName = (even) => {\r\n        this.setState({\r\n            goodsName: even.target.value\r\n        })\r\n    };\r\n\r\n    onChangeStartPrice = (even) => {\r\n        this.setState({\r\n            startPrice: even.target.value\r\n        })\r\n    };\r\n\r\n\r\n    onChangeEndPrice = (even) => {\r\n        this.setState({\r\n            endPrice: even.target.value\r\n        })\r\n    };\r\n\r\n    onChangePriceSort = (even) => {\r\n        this.setState({\r\n            sort: even.target.value\r\n        })\r\n    };\r\n\r\n    onChangeQuantity = (even) => {\r\n        this.setState({\r\n            quantity: even.target.value\r\n        })\r\n    };\r\n\r\n    onChangeStatus = (even) => {\r\n        this.setState({\r\n            status: even.target.value\r\n        })\r\n    };\r\n\r\n    // 每個頁面上的點擊\r\n    onClickPage = (pageNo) => {\r\n        this.setState({\r\n            currentPageNo: pageNo\r\n        });\r\n        // this.fetchList();\r\n    }\r\n\r\n    // 下一頁點擊\r\n    onClickPageAdd = () => {\r\n        this.setState({\r\n            currentPageNo: this.state.currentPageNo+1\r\n        });\r\n    }\r\n\r\n    // 前一頁點擊\r\n    onClickPageSub = () => {\r\n        this.setState({\r\n            currentPageNo: this.state.currentPageNo-1\r\n        });\r\n    }\r\n\r\n    // 最首頁點擊\r\n    onClickPageStart = () => {\r\n        this.setState({\r\n            currentPageNo:1\r\n        });\r\n    }\r\n\r\n    // 最末頁點擊\r\n    onClickPageEnd = () => {\r\n        this.setState({\r\n            currentPageNo:this.state.genericPageable.endPageNo\r\n        });\r\n    }\r\n\r\n    // 各欄位排序圖片狀態顯示:(在input那邊需要搭配箭頭函式才可以使用)\r\n    onClickSort = (event,orderByItem) => {\r\n        const { sort } = this.state;\r\n        const newSort = sort === \"ASC\" ? \"DESC\" : \"ASC\"; // 點擊 ASC & DESC 互換\r\n        const imageValue = sort === \"ASC\" ? picDesc : picAsc; // 判斷變圖\r\n        const imagePicAll = picAll; // 原圖\r\n      \r\n        this.setState({\r\n          sort: newSort,\r\n          orderByItem: orderByItem, // 將排序條件更換 (這樣畫面值才會更新到)\r\n          imagePicGoodID: orderByItem === 'goodsID' ? imageValue : imagePicAll,\r\n          imagePicGoodName: orderByItem === 'goodsName' ? imageValue : imagePicAll,\r\n          imagePicGoodPrice: orderByItem === 'goodsPrice' ? imageValue : imagePicAll,\r\n          imagePicBuyQuantity: orderByItem === 'goodsQuantity' ? imageValue : imagePicAll,\r\n          imagePicStatus: orderByItem === 'status' ? imageValue : imagePicAll,\r\n        });\r\n      }\r\n\r\n    render() {\r\n        const { goodsID,goodsName,quantity,startPrice,endPrice,status,genericPageable,goodsDatas,currentPageNo,sort,\r\n            imagePicGoodID,imagePicGoodName,imagePicGoodPrice,imagePicBuyQuantity,imagePicStatus } = this.state;\r\n        \r\n        return (\r\n            <div>\r\n                <h3>商品列表</h3>\r\n                {/* <form onSubmit={this.handleSubmit}> */}\r\n                    商品編號:\r\n                    <input type=\"number\"  placeholder=\"Enter Goods Number\" value={goodsID} onChange={this.onChangeGoodsID}/>\r\n                    <br/>\r\n                    商品名稱(不區分大小寫):\r\n                    <input type=\"text\"  placeholder=\"Enter Goods Name\" value={goodsName} onChange={this.onChangeGoodsName}/>\r\n                    <br/>\r\n                    \r\n                    商品價格最低價:\r\n                    <input type=\"number\"  placeholder=\"Enter goods price Min\" value={startPrice} onChange={this.onChangeStartPrice}/>\r\n                    <br/>\r\n\r\n                    商品價格最高價:\r\n                    <input type=\"number\"  placeholder=\"Enter goods price Max\" value={endPrice} onChange={this.onChangeEndPrice}/>\r\n                    <br/>\r\n\r\n                    排序方式:\r\n                    <select id=\"orderByItem\" value={sort} onChange={this.onChangePriceSort}>\r\n                        <option value='asc' selected={sort == \"asc\"}> ASC(低-高)</option>\r\n                        <option value='desc' selected={sort == \"desc\"}>DESC(高-低)</option>\r\n                    </select>\r\n                    <br/>\r\n\r\n                    商品低於庫存量:\r\n                    <input type=\"number\"  placeholder=\"Enter goods stock quantity\" value={quantity} onChange={this.onChangeQuantity} />\r\n                    <br/>\r\n\r\n                    商品狀態:\r\n                    <select onChange={this.onChangeStatus}>\r\n                        <option value=\"\">ALL</option>\r\n                        <option value=\"1\" selected={status === \"1\"}>上架</option>\r\n                        <option value=\"0\" selected={status === \"0\"}>下架</option>\r\n                    </select>\r\n                    <br/>\r\n                    <button onClick={this.onClickSumit}>查詢</button>\r\n                    目前排序為:{sort}\r\n                {/* </form> */}\r\n                <hr/>\r\n                {goodsDatas && genericPageable &&\r\n                <div>\r\n                    \r\n                    <table border={'2'}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>商品編號<img src={imagePicGoodID} onClick={(event) => this.onClickSort(event, 'goodsID')}/></th>\r\n                                <th>商品名稱<img src={imagePicGoodName}  onClick={(event) => this.onClickSort(event, 'goodsName')}/></th>\r\n                                <th>商品價格<img src={imagePicGoodPrice}  onClick={(event) => this.onClickSort(event, 'goodsPrice')}/></th>\r\n                                <th>現有庫存<img src={imagePicBuyQuantity}  onClick={(event) => this.onClickSort(event, 'goodsQuantity')} /></th>\r\n                                <th>商品狀態<img src={imagePicStatus}  onClick={(event) => this.onClickSort(event, 'status')} /></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {goodsDatas.map((item, index) => (\r\n                            <tr key={item.goodsID}> \r\n                                <td>{item.goodsID}</td>                      \r\n                                <td>{item.goodsName}</td>\r\n                                <td>{item.goodsPrice}</td>\r\n                                <td>{item.goodsQuantity}</td>\r\n                                <td>{item.status =='1' ?'上架中':'下架中'}</td>\r\n                            </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                {/* </div> */}\r\n                          \r\n                <div>\r\n                    <button disabled={genericPageable.currentPageNo ==1}\r\n                    onClick={() => this.onClickPageStart()}>{'<<'}</button>\r\n\r\n                    <button disabled={genericPageable.currentPageNo <2}\r\n                    onClick={() => this.onClickPageSub()}>{'<'}</button>\r\n\r\n                    {genericPageable.pagination && genericPageable.pagination.map((pageNo, index) => (\r\n                        \r\n                        <span key={index}>\r\n                            \r\n                        <button onClick={() => this.onClickPage(pageNo)}>\r\n                            {/* 如果為當前頁面 粗體&下底線 */}\r\n                            {currentPageNo ===pageNo ?<b><u>{pageNo}</u></b> :pageNo}\r\n                        </button>\r\n                        </span>\r\n                    ))}           \r\n                    <button disabled={genericPageable.currentPageNo >= genericPageable.endPageNo } \r\n                    onClick={() => this.onClickPageAdd()}>{'>'}</button>\r\n\r\n                    <button disabled={currentPageNo==genericPageable.endPageNo  }\r\n                    onClick={() => this.onClickPageEnd()}>{'>>'}</button>\r\n\r\n                    <select onChange={this.onChangePageDataSize}>\r\n                        <option value=\"\">更改每頁顯示筆數</option>\r\n                        <option value=\"3\" selected={status === \"3\"}>3/page</option>\r\n                        <option value=\"6\" selected={status === \"6\"}>6/page</option>\r\n                        <option value=\"9\" selected={status === \"9\"}>9/page</option>\r\n                    </select>    \r\n\r\n                    共{genericPageable.dataTotalSize}件商品\r\n                </div>            \r\n                </div>\r\n    }\r\n                <hr/>\r\n                {/* 下面是拿來看測試資料的\r\n                ID:{goodsID}<br/>\r\n                名稱:{goodsName}<br/>\r\n                開始:{startPrice}<br/>\r\n                結束:{endPrice}<br/>\r\n                排序:{priceSort}<br/>\r\n                庫存:{quantity}<br/>\r\n                狀態:{status}<br/>\r\n                currentPageNo:{this.state.currentPageNo},\r\n                pageDataSize:{this.state.pageDataSize},\r\n                pagesIconSize:{this.state.pagesIconSize},\r\n                <pre>{JSON.stringify(listReport, null, 2)}</pre>\r\n                {genericPageable.pagination} */}\r\n            </div>\r\n\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default GoodsList;","C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\SearchGoods.js",["184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202"],[],"import React, { useState,useEffect } from 'react';\r\nimport axios from \"axios\";\r\nimport { useParams, useLocation } from \"react-router-dom\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport CarGoods from './CarGoods';\r\nimport './SearchGoods.css';\r\nimport loadingWait from './pic/loadingWait.gif';\r\n\r\n\r\n// 前台商品列表與搜尋api\r\nconst apiUrl = 'http://localhost:8090/training/ecommerce/FrontendController/queryGoodsData';\r\n// 加入購物車\r\nconst addCarUrl = 'http://localhost:8090/training/ecommerce/MemberController/addCartGoods';\r\n\r\n// 功能說明:秀出全部商品 與 使用關鍵字查詢 顯示符合的商品頁面\r\nconst SearchGoods = ({ carCount, updateCarCount ,isLogin}) => {\r\n\r\n    // 加入購物車的遮罩設定:避免連續點擊導致畫面無法同步更新\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    // useLocation接收navigate導頁傳入而來的資料\r\n    // location.state?.xxxx 來確保null不會觸發錯誤 (不加 走登入完成進來的SearchGoods會錯 因為都還沒有任何動作) \r\n    // ex:searchName不會拋錯 會顯示空(因為有可能都還沒點擊 會是null)\r\n    const location=useLocation();\r\n    // const inboxInfo=location.state;// EcommerceRouterDom那邊傳入的資料(一定是state)\r\n    const searchInfo=location.state?.searchName;// 商品搜尋內容\r\n    const page=location.state?.page; //page設定固定是1(給每次點擊都傳入第一頁)\r\n    const toggle=location.state?.toggle;//觸發使用\r\n\r\n    // const isLoginData=location.state?.toggle;\r\n\r\n    const navigate = useNavigate();\r\n\r\n\r\n    // const params = useParams();\r\n    // const nowSearch=params.searchName;\r\n\r\n\r\n    //各欄位的初始化\r\n    const [data, setData] = useState({\r\n        //輸入的資訊\r\n        currentPageNo : 1,\r\n        pageDataSize : 5,\r\n        pagesIconSize :5,\r\n        searchKeyword:searchInfo,\r\n\r\n        //api回傳的資訊\r\n        goodsDatas:null,\r\n        genericPageable:null,\r\n        //\r\n        goodsID:'',\r\n        goodsName:'',\r\n        description:'',\r\n        goodsPrice:'',\r\n        goodsQuantity:'',\r\n        goodsImageName:'',\r\n        status:'',\r\n\r\n        nowToggle:toggle,//判斷是否是重新點擊搜尋按鈕使用\r\n    });\r\n    \r\n\r\n    //購物車的初始化\r\n    const [carData, setCarData] = useState({\r\n        goodsVo :{ //api要傳入的資料\r\n            goodsID: 0,//goodsID:carGoodsItem useState初始化 carGoodsItem值尚未被設定 所以不能直接用 要透過useEffect\r\n        },\r\n        carGoodsItem:0,//購物車傳值\r\n        \r\n        addGoodsData:[],\r\n        addCarGoodsID:'',\r\n        addCarGoodsName:'',\r\n        addCarPrice:'',\r\n        addCarQuantity:'',\r\n        addCarDescription:'',\r\n        addCarStatus:'',\r\n    });\r\n\r\n     \r\n    // 解構 \r\n    const {currentPageNo,pageDataSize,pagesIconSize,searchKeyword,\r\n        goodsID,goodsName,description,goodsPrice,goodsQuantity,goodsImageName,status,\r\n        queryGoodsData,goodsDatas,genericPageable,\r\n        nowToggle} =data ;\r\n\r\n    const{goodsVo,carGoodsItem,addGoodsData,addCarGoodsID}=carData;  \r\n\r\n\r\n\r\n\r\n\r\n     // 最首頁點擊\r\n     const clickPageStart = (even)  => {\r\n        setData( e => ({\r\n            ...e,//hooks無法部分更新,加...e為保持原先欄位\r\n            currentPageNo:1}));\r\n    }\r\n\r\n    // 最末頁點擊\r\n    const clickPageEnd = (even)  => {\r\n        setData( e => ({\r\n            ...e,//hooks無法部分更新,加...e為保持原先欄位\r\n            currentPageNo:genericPageable.endPageNo}));\r\n    }\r\n\r\n\r\n    // 前一頁點擊\r\n    const clickPageSub = (even)  => {\r\n        setData( e => ({\r\n            ...e,//hooks無法部分更新,加...e為保持原先欄位\r\n            currentPageNo: currentPageNo-1}));\r\n    }\r\n\r\n\r\n    // 下一頁點擊\r\n    const clickPageAdd = ()  => {\r\n        setData( e => ({\r\n            ...e,//hooks無法部分更新,加...e為保持原先欄位\r\n            currentPageNo: currentPageNo+1}));\r\n    }\r\n\r\n    // 每個頁面上的點擊\r\n    const clickPage = (pageNo)  => {\r\n        setData( e => ({\r\n            ...e,//hooks無法部分更新,加...e為保持原先欄位\r\n            currentPageNo: pageNo}));\r\n    }\r\n\r\n    // 更改每頁資料顯示筆數\r\n    const changePageDataSize = (even)  => {\r\n        setData( e => ({\r\n            ...e,//hooks無法部分更新,加...e為保持原先欄位\r\n            pageDataSize:even.target.value,\r\n            //避免已經選到後面頁面導致畫面有空資料\r\n            currentPageNo:1 }));\r\n    } \r\n\r\n    // 呼叫後端api:前台商品列表與搜尋\r\n    const fetchList = async() => {\r\n        // 這邊參數用nowSearch原因: 因為值進來每次就會塞好\r\n        const params =  { \"currentPageNo\": currentPageNo,\"pageDataSize\":pageDataSize,\"pagesIconSize\":pagesIconSize,\"searchKeyword\":searchInfo};\r\n        const queryGoodsData = await axios.get(apiUrl, {params})\r\n            .then(rs => rs.data)\r\n            .catch(error => { console.log(error); });\r\n            setData( e => ({\r\n                \r\n                    ...e,//hooks無法部分更新,加...e為保持原先欄位\r\n                    goodsDatas:queryGoodsData.goodsDatas,\r\n                    genericPageable:queryGoodsData.genericPageable,\r\n                }));\r\n    }; \r\n\r\n   \r\n    // 點擊加入購物車 \r\n    const clickAddGoods = async(event) => {\r\n       \r\n        setIsLoading(true);  // 在 API 請求之前設定 isLoading 為 true，顯示遮罩 (不能放API那這樣會一直開著)\r\n        setTimeout(() => {\r\n\r\n            const newGoodsID = parseInt(event.target.value); //需要注意傳入的是數字型態\r\n            console.log(\"newGoodsID\",newGoodsID);\r\n            setCarData((prevState) => ({\r\n            ...prevState,\r\n            carGoodsItem: newGoodsID,\r\n            goodsVo: {\r\n                ...prevState.goodsVo,\r\n                goodsID: newGoodsID,\r\n            },\r\n            \r\n            }));\r\n\r\n        }, 500); // 延遲0.5秒後執行 API 請求 只是要展顯出畫面的效果\r\n        \r\n        \r\n        // const newCarCount = carCount + 1;\r\n        // updateCarCount(newCarCount);\r\n\r\n\r\n        // window.location=\"/SearchGoods\"; \r\n        // navigate(\"/SearchGoods\",{state:});\r\n        \r\n    };\r\n    // 呼叫後端api: 加入購物車\r\n    const fetchList2 = async() => {\r\n        \r\n\r\n        const addGoodsData = await axios.post(addCarUrl, goodsVo,{ withCredentials: true })\r\n            .then(rs => rs.data)\r\n            .catch(error => { console.log(error); });\r\n\r\n            if(addGoodsData != '' ){ //addGoodsData不為空才setData不然會有很多空[]在裡面\r\n                setCarData( prevData  => ({\r\n                    ...prevData ,//hooks無法部分更新,加...e為保持原先欄位\r\n                    addGoodsData:[...prevData.addGoodsData, addGoodsData],//這樣才會留住之前的購物車內容\r\n                    addCarGoodsID:addGoodsData.goodsID ,\r\n                    addCarGoodsName:addGoodsData.goodsName ,\r\n                    addCarPrice:addGoodsData.price ,\r\n                    addCarQuantity:addGoodsData.quantity ,\r\n                   \r\n                }));\r\n\r\n            // 在 API 請求結束後設定 isLoading 為 false，隱藏遮罩\r\n            setIsLoading(false);    \r\n                \r\n         }\r\n    }\r\n    \r\n    // 生命週期放置的位置\r\n    useEffect(() => {\r\n        fetchList2();\r\n        //這邊是回傳給Ecommerce刷新購物車數量用\r\n        const newCarCount = carCount + 1;\r\n        updateCarCount(newCarCount);\r\n    },//如果只使用ID判斷 就不能購買相同物品 如果用count&ID判斷 當換不同商品會變成觸發兩次\r\n    [goodsVo]);// useEffect 第二個欄位為componentDidUpdate\r\n\r\n    \r\n\r\n    // 生命週期放置的位置\r\n    useEffect(() => {\r\n        //如果觸發不一樣(代表按鈕有重按過):更新搜尋文字 ->改成第一頁顯示 ->觸發更新同步為新的狀態\r\n        if (nowToggle !== toggle) {\r\n            setData(prevState => ({\r\n              ...prevState,\r\n              searchKeyword:searchInfo,\r\n              currentPageNo: page,\r\n              nowToggle:toggle\r\n            }));\r\n          }\r\n        fetchList();\r\n    },\r\n    [currentPageNo,pageDataSize,searchInfo,toggle]);// useEffect 第二個欄位為componentDidUpdate\r\n\r\n    \r\n\r\n    return (\r\n        <div>\r\n         {/* 測試:{searchInfo}  <br/> */}\r\n         {/* 頁碼:{page}  <br/> */}\r\n         {/* 觸發前頁狀態{toggle.toString()}<br/> */}\r\n         {/* 觸發後頁狀態{nowToggle.toString()}<br/> */}\r\n         {/* 目前頁碼:{currentPageNo} */}\r\n        {/* 前提條件需要 goodsDatas & genericPageable 有值才會顯示表格 */}\r\n\r\n        {!isLogin && <div>尚未登入,只能查看商品,若要加入購物車請先登入</div>}\r\n\r\n\r\n        { goodsDatas &&  genericPageable &&\r\n                <div>\r\n                <table border={'2'}>\r\n                    <thead>\r\n                        <tr>\r\n                        \r\n                            <th>商品編號</th>\r\n                            <th>商品姓名</th> \r\n                            <th>商品描述</th>\r\n                            <th>商品價格</th>\r\n                            <th>剩餘數量</th>\r\n                            <th>商品圖片</th>\r\n                            <th>商品狀態</th>\r\n                           \r\n                            \r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {goodsDatas.map((item, index) => (\r\n                        <tr key={goodsDatas.goodsID}> \r\n                        \r\n                        <td>{item.goodsID}</td> \r\n                        <td>{item.goodsName}</td> \r\n                        <td>{item.description}</td> \r\n                        <td>{item.goodsPrice}</td> \r\n                        <td>{item.goodsQuantity}</td> \r\n                        {/* 原本這個只秀商品圖片名稱 */}\r\n                        {/* <td>{item.goodsImageName}</td>  */}\r\n                        <td>    \r\n                        <img src={`http://localhost:8090/training/goodsImg/${item.goodsImageName}`} \r\n                        style={{ width: '200px', height: '150px' }} /></td>\r\n                        <td>{item.goodsQuantity > 0 ? '銷售中':'暫時缺貨中'}\r\n                            <br/>\r\n                            {/* disabled=false才是關閉 所以要 false(有登入) || false(有庫存) 才可以加入購物車 */}\r\n                            <button value={item.goodsID} onClick={clickAddGoods} disabled={!isLogin || !(item.goodsQuantity > 0 )}>加入購物車</button><br/>\r\n                            商品ID:{item.goodsID}\r\n                        </td> \r\n                        \r\n                        {isLoading && (\r\n                            <div className=\"overlay\">\r\n                                <img src={loadingWait} style={{ width: '300px', height: '300px' }} /><br/>\r\n                                <br/><br/><br/><br/><br/>\r\n                                {/* <div>加入購物車中...</div> */}\r\n                                {/* <div className=\"overlay\">加入購物車中...</div> */}\r\n                                加入購物車...\r\n                            </div>\r\n                        )}\r\n\r\n                        </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n                <hr/> \r\n                <div>\r\n                \r\n                    \r\n                    <button disabled={genericPageable.currentPageNo ==1}\r\n                    onClick={() => clickPageStart()}>{'<<'}</button>\r\n                    <button disabled={genericPageable.currentPageNo <2}\r\n                    onClick={() => clickPageSub()}>{'<'}</button>\r\n                    \r\n                    {genericPageable.pagination.map((pageNo, index) => (\r\n                        \r\n                        <span key={index}>\r\n                            \r\n                        <button onClick={() => clickPage(pageNo)}>\r\n                            {/* 如果為當前頁面 粗體&下底線 */}\r\n                            {currentPageNo ===pageNo ?<b><u>{pageNo}</u></b> :pageNo}\r\n                        </button>\r\n                        </span>\r\n                    ))}\r\n\r\n                    <button disabled={genericPageable.currentPageNo >= genericPageable.endPageNo } \r\n                    onClick={() => clickPageAdd()}>{'>'}</button>\r\n\r\n                    <button disabled={currentPageNo==genericPageable.endPageNo  }\r\n                    onClick={() => clickPageEnd()}>{'>>'}</button>\r\n\r\n                    <select onChange={changePageDataSize}>\r\n                        <option value=\"\">更改每頁顯示筆數</option>\r\n                        <option value=\"3\" selected={status === \"3\"}>3/page</option>\r\n                        <option value=\"6\" selected={status === \"6\"}>6/page</option>\r\n                        <option value=\"9\" selected={status === \"9\"}>9/page</option>\r\n                    </select>    \r\n\r\n                    共{genericPageable.dataTotalSize}件商品\r\n                </div> \r\n                </div>\r\n                }\r\n\r\n                <hr/>\r\n                測試用:<br/>\r\n                carGoodsItem: {carGoodsItem}<br/>\r\n                觸發使用:<br/>\r\n                筆數:{addGoodsData.length}\r\n                {/* 這個不要看 會顯示錯誤的 直接看swagger那邊的 */}\r\n                {/* <pre>{JSON.stringify(addGoodsData, null, 2)}</pre> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchGoods;\r\n\r\n","C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\PageControlBar.js",[],[],"C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\MemberLogicOut.js",["203","204","205","206","207"],[],"C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\EcommerceRouterDom.js",["208","209","210","211","212","213","214","215"],[],"C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\ClearCarGoods.js",["216","217","218","219","220"],[],"import React, { useState, useEffect,useRef ,setData } from 'react';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\n//清空購物車\r\nconst apiClearCarUrl = 'http://localhost:8090/training/ecommerce/MemberController/clearCartGoods';\r\n\r\nconst ClearCarGoods = () => {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    // 後端api:清空購物車\r\n    const fetchList = async () => {\r\n        const clearGoodsData = await axios.delete(apiClearCarUrl,{ withCredentials: true })\r\n            .then(rs => rs.data)\r\n            .catch(error => { console.log(error); });\r\n            navigate(\"/SearchGoods\");//導回到購買頁面\r\n        \r\n    };\r\n\r\n    const clearCartGoods = () => {\r\n        fetchList();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={clearCartGoods}>清空購物車</button>    \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ClearCarGoods\r\n","C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\MemberCheck.js",["221","222","223","224","225","226","227","228"],[],"import React, { Component,useState,useEffect, Fragment } from 'react';\r\nimport { BrowserRouter, Link, Routes, Route,useLocation} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\n//檢查登入\r\nconst apiUrlcheckLogin = 'http://localhost:8090/training/ecommerce/MemberController/checkLogin';\r\n\r\nconst MemberCheck = () => {\r\n    const [data, setData] = useState({\r\n        \r\n        idNo: '', \r\n        cusName:'',\r\n        loginMessage: '',\r\n        isLogin:false,\r\n        \r\n      });\r\n// 解構 \r\n  const {idNo,cusName,loginMessage,isLogin} =data ;\r\n  const fetchList = async () => {\r\n    const memberData = await axios\r\n      .get(apiUrlcheckLogin, { withCredentials: true })\r\n      .then((rs) => rs.data)\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n    setData((prevState) => ({\r\n      ...prevState,\r\n      idNo: memberData.identificationNo,\r\n      cusName: memberData.cusName,\r\n      loginMessage: memberData.loginMessage,\r\n      isLogin: memberData.isLogin,\r\n    })\r\n    );\r\n  };\r\n  // 生命週期放置的位置\r\n  useEffect(() => {\r\n    fetchList();\r\n  },\r\n  [idNo]);\r\n\r\n  return (\r\n    <div>\r\n     {cusName &&  <Fragment>歡迎光臨 {cusName} 先生/小姐您好!</Fragment> }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MemberCheck\r\n\r\n\r\n\r\n","C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\ErrorPage.js",[],[],"C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\CheckOutGoods.js",["229","230","231","232","233","234"],[],"import React, { useState, useEffect,useRef } from 'react'\r\nimport axios from \"axios\";\r\nimport { useLocation } from 'react-router';\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n// 送出訂單(結帳購物車商品) api\r\nconst apiUrl = 'http://localhost:8090/training/ecommerce/FrontendController/checkoutGoods';\r\n// 清空購物車 api\r\nconst apiClearCarUrl = 'http://localhost:8090/training/ecommerce/MemberController/clearCartGoods';\r\n\r\n// 功能:結帳購物車頁面\r\nconst CheckOutGoods = ({ carCount, updateCarCount }) => {\r\n    const navigate = useNavigate();\r\n    const location=useLocation();\r\n    const data=location.state;\r\n  \r\n    const wantGoods=data.queryGoodsData;//想要購買的商品內容\r\n    const mergedData = Object.values(//Object.values 函式將 queryGoodsData 所有值取出來放入一個陣列中\r\n        wantGoods.reduce((result, item) => {\r\n            //queryGoodsData內不存在此ID 初始值為改為1 (備註:當初後端傳回來的json quantity為庫存 為了方便 直接覆蓋來使用)\r\n            if (!result[item.goodsID]) {  \r\n                result[item.goodsID] = { ...item, quantity: 1 };\r\n            } else { //若此ID已經存在 代表商品數量要加1\r\n                result[item.goodsID].quantity += 1;\r\n            }\r\n            return result;\r\n        }, {})\r\n    );\r\n\r\n\r\n    const [dataResult, setDataResult] = useState({\r\n        sendGoodsData:[],\r\n        customerResult:data.customer,//從QueryCarGoods那邊傳來的訂購者資料\r\n        orderGoodsList:[],//放最後所有訂購商品項目\r\n     });\r\n\r\n     const { sendGoodsData,customerResult,orderGoodsList} = dataResult;\r\n\r\n   // 呼叫後端api:送出訂單 & 清空購物車\r\n   const fetchList = async() => {\r\n    // 1.送出訂單\r\n    const reportData = await axios.post(apiUrl,customerResult,{ withCredentials: true })\r\n        .then(rs => rs.data)\r\n        .catch(error => { console.log(error); });\r\n      setDataResult( e => ({\r\n            ...e,//hooks無法部分更新,加...e為保持原先欄位\r\n            sendGoodsData:reportData,\r\n            customerResult: reportData.customer, \r\n            orderGoodsList: reportData.orderGoodsList\r\n        }));\r\n        \r\n    // 2.同時清空購物車    \r\n    const clearGoodsData = await axios.delete(apiClearCarUrl,{ withCredentials: true })\r\n        .then(rs => rs.data)\r\n        .catch(error => { console.log(error); });\r\n        //這邊是回傳給Ecommerce刷新購物車數量用 (讓上層的按鈕同時刷新)\r\n        const newCarCount = carCount + 1;\r\n        updateCarCount(newCarCount);\r\n    };\r\n\r\n    useEffect(() => {\r\n      fetchList();//預先載入的就是購買者的資訊與購買商品\r\n  }, []);\r\n\r\n  \r\n  const cilckGoBuy = () => {\r\n    navigate(\"/SearChGoods\");//導入到原本首頁頁面(只導頁不做任何動作 避免使用者沒依照這邊點選)\r\n  };\r\n\r\n  // reduce 接受兩個參數 (total累加,item當前值),0是初始值\r\n  const totalAmount = orderGoodsList.reduce((total, item) => total + item.price * item.buyRealQuantity, 0);\r\n\r\n  // 點擊繼續購物導入首頁商品\r\n  const clickHomePage = ()  => {\r\n    navigate(\"/SearchGoods\");//導入到首頁\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/* <button onClick={sendOrder} >送出訂單</button><br/> */}\r\n      {/* 測試中: */}\r\n      {/* customer:{data.customer} */}\r\n\r\n\r\n      {/* 最後結帳業1\r\n      新增內容為:<pre>{JSON.stringify(reportData.customer, null, 2)}</pre>  \r\n      新增內容為:<pre>{JSON.stringify(reportData.orderGoodsList, null, 2)}</pre>  */}\r\n\r\n      {/* 重複在完成結帳頁面刷新 */}\r\n    {orderGoodsList.length <= 0  && \r\n     <div>你已完成購物結帳 請勿重複刷新\r\n        <button onClick={clickHomePage}>回首頁</button>\r\n      </div>} \r\n\r\n\r\n\r\n    {orderGoodsList.length > 0  &&\r\n    <div>\r\n      訂單確認完成:\r\n        <div>\r\n          <p>收件人姓名: {customerResult.cusName}</p>\r\n          <p>手機號碼: {customerResult.mobileNumber}</p>\r\n          <p>聯絡電話: {customerResult.homeNumber}</p>\r\n          <p>收件地址: {customerResult.orderAddr}</p>\r\n          <button onClick={cilckGoBuy}>繼續購物</button>\r\n            \r\n        </div>\r\n      \r\n          <table border={'2'}>\r\n              <thead>\r\n                  <tr>\r\n                    <th>商品編號</th>\r\n                    <th>商品圖片</th>\r\n                    <th>商品名稱</th>\r\n                    <th>商品價格</th>\r\n                    <th>商品數量</th>\r\n                  </tr>\r\n              </thead>\r\n              <tbody>\r\n                  {orderGoodsList.map((item, index) => (\r\n                  <tr key={item.goodsID}> \r\n                  \r\n                  <td>{item.goodsID}</td> \r\n                  {/* <td>{item.imageName}</td>  */}\r\n                  <td>    \r\n                    <img src={`http://localhost:8090/training/goodsImg/${item.imageName}`} \r\n                    style={{ width: '200px', height: '150px' }} /></td>\r\n                  <td>{item.goodsName}</td>\r\n                  <td>{item.price}</td>    \r\n                  <td>{item.buyRealQuantity}</td>    \r\n                  \r\n                  </tr>\r\n                  \r\n                  ))}\r\n                  結帳總額:{totalAmount}\r\n              </tbody>\r\n              {/* 兩個陣列相互比較,orderGoodsList:最後訂單,mergedItem:購物車 來比較最後購買差異 */}\r\n              {orderGoodsList.map((item, index) => {\r\n                const mergedItem = mergedData[index]; // 取得相應索引的 mergedData 元素\r\n                if (mergedItem && item.buyRealQuantity !== mergedItem.quantity) {\r\n                  return (\r\n                    \r\n                    <React.Fragment key={item.goodsID}>\r\n                      \r\n                      <div>商品編號: {mergedItem.goodsID} 庫存不足</div>\r\n                      <div>購買數量:原先預計({mergedItem.quantity}) / 最後實際({item.buyRealQuantity}) </div>\r\n                      \r\n                    </React.Fragment>\r\n                  );\r\n                  \r\n                }\r\n              })}\r\n\r\n          </table>\r\n                      \r\n    </div>\r\n        }\r\n        \r\n    </div>\r\n    \r\n  )\r\n}\r\n\r\nexport default CheckOutGoods\r\n","C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\SearchName.js",["235"],[],"import React, { useState } from 'react';\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n//功能:輸入搜尋文字使用\r\nconst SearchName = () => {\r\n    const navigate = useNavigate();\r\n\r\n    const [data, setData] = useState({\r\n        // 各欄位的初始化\r\n        searchName:'',//搜尋內容\r\n        page:1,//當今頁面\r\n        toggle:true,//觸發\r\n      });\r\n\r\n      const {searchName,toggle} =data ;\r\n    \r\n    // 頁面標頭的商品搜尋\r\n    const changeSearchGoodsName = (event) => {\r\n        setData((prevState) => ({\r\n        ...prevState,\r\n        searchName: event.target.value,\r\n        }));\r\n    };  \r\n\r\n    // 送出搜尋\r\n    const clickSearchName = (event) => {\r\n        setData((prevState) => ({\r\n            ...prevState,\r\n            toggle:!toggle, //當每次點擊按鈕的時候會 true <->false 互換\r\n            // page:1,\r\n            // count:count+1,\r\n            }));\r\n        navigate(\"/SearchGoods\",{state:data}); //將data內容傳入至SearchGoods\r\n    };  \r\n\r\n    return (\r\n        <div>\r\n\r\n            <input type=\"text\" onBlur={changeSearchGoodsName} placeholder='搜尋商品名稱'/>\r\n            <button onClick={clickSearchName}>搜尋</button>\r\n            <br/>\r\n            {/* 測試中:{searchName} */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchName\r\n\r\n","C:\\JavaPCSchool3\\e-commerce-app\\src\\Homework\\CarGoods.js",["236"],[],"import React, { useState, useEffect,useRef } from 'react'\r\nimport axios from \"axios\";\r\n\r\n//查詢購物車商品\r\nconst apiUrl = 'http://localhost:8090/training/ecommerce/MemberController/queryCartGoods';\r\n\r\n//單純搜尋購物車數量  現在這邊還沒完成\r\n\r\nconst CarGoods = () => {\r\n    const [data, setData] = useState({\r\n        queryGoodsData: [],\r\n        \r\n    });\r\n\r\n    const { queryGoodsData } = data;\r\n\r\n    // 後端api\r\n    const fetchList = async () => {\r\n        const queryGoodsData = await axios.get(apiUrl, { withCredentials: true })\r\n            .then(rs => rs.data)\r\n            .catch(error => { console.log(error); });\r\n\r\n        if (queryGoodsData) { //如果存在\r\n            setData(prevData => ({\r\n                ...prevData,\r\n                queryGoodsData: queryGoodsData,\r\n                \r\n            }));\r\n            // updateCartCount(queryGoodsData.length);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchList();\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <div>\r\n            {/* 筆數:{queryGoodsData.length} */}\r\n        <button>\r\n            購物車\r\n            {/* 如果購物車有內容顯示筆數 */}\r\n            {queryGoodsData && queryGoodsData.length}\r\n        </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CarGoods\r\n",{"ruleId":"237","severity":1,"message":"238","line":5,"column":8,"nodeType":"239","messageId":"240","endLine":5,"endColumn":27},{"ruleId":"237","severity":1,"message":"241","line":6,"column":8,"nodeType":"239","messageId":"240","endLine":6,"endColumn":39},{"ruleId":"237","severity":1,"message":"242","line":7,"column":8,"nodeType":"239","messageId":"240","endLine":7,"endColumn":19},{"ruleId":"237","severity":1,"message":"243","line":8,"column":8,"nodeType":"239","messageId":"240","endLine":8,"endColumn":26},{"ruleId":"237","severity":1,"message":"244","line":9,"column":8,"nodeType":"239","messageId":"240","endLine":9,"endColumn":17},{"ruleId":"237","severity":1,"message":"245","line":10,"column":8,"nodeType":"239","messageId":"240","endLine":10,"endColumn":24},{"ruleId":"237","severity":1,"message":"246","line":11,"column":8,"nodeType":"239","messageId":"240","endLine":11,"endColumn":19},{"ruleId":"237","severity":1,"message":"247","line":12,"column":8,"nodeType":"239","messageId":"240","endLine":12,"endColumn":19},{"ruleId":"237","severity":1,"message":"248","line":17,"column":8,"nodeType":"239","messageId":"240","endLine":17,"endColumn":21},{"ruleId":"237","severity":1,"message":"249","line":18,"column":8,"nodeType":"239","messageId":"240","endLine":18,"endColumn":22},{"ruleId":"237","severity":1,"message":"250","line":20,"column":8,"nodeType":"239","messageId":"240","endLine":20,"endColumn":22},{"ruleId":"251","severity":1,"message":"252","line":187,"column":7,"nodeType":"253","endLine":187,"endColumn":48,"suggestions":"254"},{"ruleId":"255","severity":1,"message":"256","line":218,"column":38,"nodeType":"257","messageId":"258","endLine":218,"endColumn":58,"fix":"259"},{"ruleId":"260","severity":1,"message":"261","line":243,"column":37,"nodeType":"262","endLine":243,"endColumn":123},{"ruleId":"260","severity":1,"message":"261","line":244,"column":37,"nodeType":"262","endLine":244,"endColumn":127},{"ruleId":"260","severity":1,"message":"261","line":245,"column":37,"nodeType":"262","endLine":245,"endColumn":134},{"ruleId":"260","severity":1,"message":"261","line":246,"column":37,"nodeType":"262","endLine":246,"endColumn":127},{"ruleId":"260","severity":1,"message":"261","line":247,"column":37,"nodeType":"262","endLine":247,"endColumn":131},{"ruleId":"260","severity":1,"message":"261","line":248,"column":37,"nodeType":"262","endLine":248,"endColumn":137},{"ruleId":"260","severity":1,"message":"261","line":249,"column":37,"nodeType":"262","endLine":249,"endColumn":136},{"ruleId":"263","severity":1,"message":"264","line":275,"column":69,"nodeType":"265","messageId":"266","endLine":275,"endColumn":71},{"ruleId":"263","severity":1,"message":"264","line":294,"column":52,"nodeType":"265","messageId":"266","endLine":294,"endColumn":54},{"ruleId":"237","severity":1,"message":"267","line":117,"column":96,"nodeType":"239","messageId":"240","endLine":117,"endColumn":105},{"ruleId":"237","severity":1,"message":"268","line":117,"column":106,"nodeType":"239","messageId":"240","endLine":117,"endColumn":113},{"ruleId":"263","severity":1,"message":"264","line":170,"column":69,"nodeType":"265","messageId":"266","endLine":170,"endColumn":71},{"ruleId":"263","severity":1,"message":"264","line":189,"column":52,"nodeType":"265","messageId":"266","endLine":189,"endColumn":54},{"ruleId":"237","severity":1,"message":"267","line":286,"column":13,"nodeType":"239","messageId":"240","endLine":286,"endColumn":22},{"ruleId":"237","severity":1,"message":"268","line":286,"column":23,"nodeType":"239","messageId":"240","endLine":286,"endColumn":30},{"ruleId":"260","severity":1,"message":"261","line":312,"column":37,"nodeType":"262","endLine":312,"endColumn":114},{"ruleId":"260","severity":1,"message":"261","line":313,"column":37,"nodeType":"262","endLine":313,"endColumn":121},{"ruleId":"260","severity":1,"message":"261","line":314,"column":37,"nodeType":"262","endLine":314,"endColumn":124},{"ruleId":"260","severity":1,"message":"261","line":315,"column":37,"nodeType":"262","endLine":315,"endColumn":117},{"ruleId":"260","severity":1,"message":"261","line":316,"column":37,"nodeType":"262","endLine":316,"endColumn":123},{"ruleId":"260","severity":1,"message":"261","line":317,"column":37,"nodeType":"262","endLine":317,"endColumn":129},{"ruleId":"260","severity":1,"message":"261","line":318,"column":37,"nodeType":"262","endLine":318,"endColumn":131},{"ruleId":"263","severity":1,"message":"264","line":345,"column":69,"nodeType":"265","messageId":"266","endLine":345,"endColumn":71},{"ruleId":"263","severity":1,"message":"264","line":364,"column":52,"nodeType":"265","messageId":"266","endLine":364,"endColumn":54},{"ruleId":"237","severity":1,"message":"269","line":4,"column":8,"nodeType":"239","messageId":"240","endLine":4,"endColumn":13},{"ruleId":"237","severity":1,"message":"270","line":35,"column":25,"nodeType":"239","messageId":"240","endLine":35,"endColumn":29},{"ruleId":"237","severity":1,"message":"271","line":35,"column":30,"nodeType":"239","messageId":"240","endLine":35,"endColumn":37},{"ruleId":"237","severity":1,"message":"272","line":36,"column":12,"nodeType":"239","messageId":"240","endLine":36,"endColumn":28},{"ruleId":"237","severity":1,"message":"273","line":36,"column":29,"nodeType":"239","messageId":"240","endLine":36,"endColumn":40},{"ruleId":"251","severity":1,"message":"274","line":123,"column":7,"nodeType":"253","endLine":123,"endColumn":28,"suggestions":"275"},{"ruleId":"237","severity":1,"message":"276","line":30,"column":55,"nodeType":"239","messageId":"240","endLine":30,"endColumn":64},{"ruleId":"237","severity":1,"message":"276","line":94,"column":55,"nodeType":"239","messageId":"240","endLine":94,"endColumn":64},{"ruleId":"263","severity":1,"message":"264","line":119,"column":37,"nodeType":"265","messageId":"266","endLine":119,"endColumn":39},{"ruleId":"263","severity":1,"message":"264","line":125,"column":41,"nodeType":"265","messageId":"266","endLine":125,"endColumn":43},{"ruleId":"260","severity":1,"message":"261","line":145,"column":21,"nodeType":"262","endLine":146,"endColumn":67},{"ruleId":"277","severity":1,"message":"278","line":145,"column":9,"nodeType":"279","messageId":"280","endLine":145,"endColumn":102},{"ruleId":"263","severity":1,"message":"281","line":145,"column":22,"nodeType":"265","messageId":"266","endLine":145,"endColumn":24},{"ruleId":"277","severity":1,"message":"278","line":146,"column":9,"nodeType":"279","messageId":"280","endLine":146,"endColumn":67},{"ruleId":"263","severity":1,"message":"281","line":146,"column":22,"nodeType":"265","messageId":"266","endLine":146,"endColumn":24},{"ruleId":"237","severity":1,"message":"282","line":162,"column":89,"nodeType":"239","messageId":"240","endLine":162,"endColumn":94},{"ruleId":"260","severity":1,"message":"261","line":192,"column":21,"nodeType":"262","endLine":193,"endColumn":67},{"ruleId":"263","severity":1,"message":"264","line":201,"column":41,"nodeType":"265","messageId":"266","endLine":201,"endColumn":43},{"ruleId":"263","severity":1,"message":"264","line":207,"column":45,"nodeType":"265","messageId":"266","endLine":207,"endColumn":47},{"ruleId":"263","severity":1,"message":"281","line":219,"column":39,"nodeType":"265","messageId":"266","endLine":219,"endColumn":41},{"ruleId":"237","severity":1,"message":"283","line":43,"column":9,"nodeType":"239","messageId":"240","endLine":43,"endColumn":22},{"ruleId":"237","severity":1,"message":"284","line":44,"column":9,"nodeType":"239","messageId":"240","endLine":44,"endColumn":23},{"ruleId":"263","severity":1,"message":"264","line":102,"column":19,"nodeType":"265","messageId":"266","endLine":102,"endColumn":21},{"ruleId":"260","severity":1,"message":"261","line":138,"column":17,"nodeType":"262","endLine":138,"endColumn":84},{"ruleId":"285","severity":1,"message":"286","line":166,"column":41,"nodeType":"262","endLine":170,"endColumn":43},{"ruleId":"263","severity":1,"message":"264","line":227,"column":60,"nodeType":"265","messageId":"266","endLine":227,"endColumn":62},{"ruleId":"263","severity":1,"message":"264","line":228,"column":61,"nodeType":"265","messageId":"266","endLine":228,"endColumn":63},{"ruleId":"260","severity":1,"message":"261","line":253,"column":41,"nodeType":"262","endLine":253,"endColumn":124},{"ruleId":"260","severity":1,"message":"261","line":254,"column":41,"nodeType":"262","endLine":254,"endColumn":129},{"ruleId":"260","severity":1,"message":"261","line":255,"column":41,"nodeType":"262","endLine":255,"endColumn":131},{"ruleId":"260","severity":1,"message":"261","line":256,"column":41,"nodeType":"262","endLine":256,"endColumn":137},{"ruleId":"260","severity":1,"message":"261","line":257,"column":41,"nodeType":"262","endLine":257,"endColumn":125},{"ruleId":"263","severity":1,"message":"264","line":267,"column":50,"nodeType":"265","messageId":"266","endLine":267,"endColumn":52},{"ruleId":"263","severity":1,"message":"264","line":275,"column":69,"nodeType":"265","messageId":"266","endLine":275,"endColumn":71},{"ruleId":"263","severity":1,"message":"264","line":294,"column":52,"nodeType":"265","messageId":"266","endLine":294,"endColumn":54},{"ruleId":"237","severity":1,"message":"287","line":3,"column":10,"nodeType":"239","messageId":"240","endLine":3,"endColumn":19},{"ruleId":"237","severity":1,"message":"288","line":5,"column":8,"nodeType":"239","messageId":"240","endLine":5,"endColumn":16},{"ruleId":"237","severity":1,"message":"289","line":32,"column":11,"nodeType":"239","messageId":"240","endLine":32,"endColumn":19},{"ruleId":"237","severity":1,"message":"290","line":81,"column":53,"nodeType":"239","messageId":"240","endLine":81,"endColumn":66},{"ruleId":"237","severity":1,"message":"291","line":82,"column":9,"nodeType":"239","messageId":"240","endLine":82,"endColumn":16},{"ruleId":"237","severity":1,"message":"292","line":82,"column":17,"nodeType":"239","messageId":"240","endLine":82,"endColumn":26},{"ruleId":"237","severity":1,"message":"293","line":82,"column":27,"nodeType":"239","messageId":"240","endLine":82,"endColumn":38},{"ruleId":"237","severity":1,"message":"294","line":82,"column":39,"nodeType":"239","messageId":"240","endLine":82,"endColumn":49},{"ruleId":"237","severity":1,"message":"295","line":82,"column":50,"nodeType":"239","messageId":"240","endLine":82,"endColumn":63},{"ruleId":"237","severity":1,"message":"296","line":82,"column":64,"nodeType":"239","messageId":"240","endLine":82,"endColumn":78},{"ruleId":"237","severity":1,"message":"297","line":83,"column":9,"nodeType":"239","messageId":"240","endLine":83,"endColumn":23},{"ruleId":"237","severity":1,"message":"298","line":86,"column":45,"nodeType":"239","messageId":"240","endLine":86,"endColumn":58},{"ruleId":"263","severity":1,"message":"281","line":191,"column":29,"nodeType":"265","messageId":"266","endLine":191,"endColumn":31},{"ruleId":"251","severity":1,"message":"299","line":215,"column":5,"nodeType":"253","endLine":215,"endColumn":14,"suggestions":"300"},{"ruleId":"251","severity":1,"message":"301","line":232,"column":5,"nodeType":"253","endLine":232,"endColumn":51,"suggestions":"302"},{"ruleId":"260","severity":1,"message":"261","line":277,"column":25,"nodeType":"262","endLine":278,"endColumn":71},{"ruleId":"260","severity":1,"message":"261","line":288,"column":33,"nodeType":"262","endLine":288,"endColumn":102},{"ruleId":"263","severity":1,"message":"264","line":304,"column":69,"nodeType":"265","messageId":"266","endLine":304,"endColumn":71},{"ruleId":"263","severity":1,"message":"264","line":323,"column":52,"nodeType":"265","messageId":"266","endLine":323,"endColumn":54},{"ruleId":"237","severity":1,"message":"303","line":1,"column":17,"nodeType":"239","messageId":"240","endLine":1,"endColumn":26},{"ruleId":"237","severity":1,"message":"304","line":4,"column":8,"nodeType":"239","messageId":"240","endLine":4,"endColumn":21},{"ruleId":"237","severity":1,"message":"289","line":13,"column":11,"nodeType":"239","messageId":"240","endLine":13,"endColumn":19},{"ruleId":"237","severity":1,"message":"305","line":17,"column":15,"nodeType":"239","messageId":"240","endLine":17,"endColumn":28},{"ruleId":"237","severity":1,"message":"306","line":26,"column":13,"nodeType":"239","messageId":"240","endLine":26,"endColumn":27},{"ruleId":"237","severity":1,"message":"307","line":1,"column":17,"nodeType":"239","messageId":"240","endLine":1,"endColumn":26},{"ruleId":"237","severity":1,"message":"308","line":2,"column":45,"nodeType":"239","messageId":"240","endLine":2,"endColumn":53},{"ruleId":"237","severity":1,"message":"304","line":15,"column":8,"nodeType":"239","messageId":"240","endLine":15,"endColumn":21},{"ruleId":"237","severity":1,"message":"309","line":63,"column":10,"nodeType":"239","messageId":"240","endLine":63,"endColumn":20},{"ruleId":"237","severity":1,"message":"270","line":63,"column":37,"nodeType":"239","messageId":"240","endLine":63,"endColumn":41},{"ruleId":"237","severity":1,"message":"310","line":63,"column":42,"nodeType":"239","messageId":"240","endLine":63,"endColumn":52},{"ruleId":"237","severity":1,"message":"311","line":63,"column":53,"nodeType":"239","messageId":"240","endLine":63,"endColumn":69},{"ruleId":"237","severity":1,"message":"312","line":68,"column":9,"nodeType":"239","messageId":"240","endLine":68,"endColumn":30},{"ruleId":"237","severity":1,"message":"313","line":1,"column":17,"nodeType":"239","messageId":"240","endLine":1,"endColumn":25},{"ruleId":"237","severity":1,"message":"303","line":1,"column":27,"nodeType":"239","messageId":"240","endLine":1,"endColumn":36},{"ruleId":"237","severity":1,"message":"314","line":1,"column":37,"nodeType":"239","messageId":"240","endLine":1,"endColumn":43},{"ruleId":"237","severity":1,"message":"315","line":1,"column":45,"nodeType":"239","messageId":"240","endLine":1,"endColumn":52},{"ruleId":"237","severity":1,"message":"306","line":14,"column":15,"nodeType":"239","messageId":"240","endLine":14,"endColumn":29},{"ruleId":"237","severity":1,"message":"307","line":1,"column":17,"nodeType":"239","messageId":"240","endLine":1,"endColumn":26},{"ruleId":"237","severity":1,"message":"316","line":2,"column":10,"nodeType":"239","messageId":"240","endLine":2,"endColumn":23},{"ruleId":"237","severity":1,"message":"317","line":2,"column":25,"nodeType":"239","messageId":"240","endLine":2,"endColumn":29},{"ruleId":"237","severity":1,"message":"318","line":2,"column":31,"nodeType":"239","messageId":"240","endLine":2,"endColumn":37},{"ruleId":"237","severity":1,"message":"319","line":2,"column":39,"nodeType":"239","messageId":"240","endLine":2,"endColumn":44},{"ruleId":"237","severity":1,"message":"320","line":2,"column":45,"nodeType":"239","messageId":"240","endLine":2,"endColumn":56},{"ruleId":"237","severity":1,"message":"321","line":18,"column":23,"nodeType":"239","messageId":"240","endLine":18,"endColumn":35},{"ruleId":"237","severity":1,"message":"322","line":18,"column":36,"nodeType":"239","messageId":"240","endLine":18,"endColumn":43},{"ruleId":"237","severity":1,"message":"314","line":1,"column":37,"nodeType":"239","messageId":"240","endLine":1,"endColumn":43},{"ruleId":"237","severity":1,"message":"283","line":37,"column":14,"nodeType":"239","messageId":"240","endLine":37,"endColumn":27},{"ruleId":"237","severity":1,"message":"306","line":53,"column":11,"nodeType":"239","messageId":"240","endLine":53,"endColumn":25},{"ruleId":"251","severity":1,"message":"252","line":63,"column":6,"nodeType":"253","endLine":63,"endColumn":8,"suggestions":"323"},{"ruleId":"260","severity":1,"message":"261","line":126,"column":21,"nodeType":"262","endLine":127,"endColumn":67},{"ruleId":"324","severity":1,"message":"325","line":138,"column":49,"nodeType":"326","messageId":"327","endLine":138,"endColumn":51},{"ruleId":"237","severity":1,"message":"309","line":15,"column":14,"nodeType":"239","messageId":"240","endLine":15,"endColumn":24},{"ruleId":"237","severity":1,"message":"314","line":1,"column":37,"nodeType":"239","messageId":"240","endLine":1,"endColumn":43},"no-unused-vars","'SalesReportSetState' is defined but never used.","Identifier","unusedVar","'SalesReportSalesReportLifeCycle' is defined but never used.","'GoodsCreate' is defined but never used.","'GoodsReplenishment' is defined but never used.","'GoodsList' is defined but never used.","'SalesReportHooks' is defined but never used.","'MemberLogic' is defined but never used.","'SearchGoods' is defined but never used.","'QueryCarGoods' is defined but never used.","'MemberLogicOut' is defined but never used.","'PageControlBar' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchList'. Either include it or remove the dependency array.","ArrayExpression",["328"],"no-whitespace-before-property","Unexpected whitespace before property toString.","MemberExpression","unexpectedWhitespace",{"range":"329","text":"330"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'startDate' is assigned a value but never used.","'endDate' is assigned a value but never used.","'Modal' is defined but never used.","'idNo' is assigned a value but never used.","'cusName' is assigned a value but never used.","'identificationNo' is assigned a value but never used.","'cusPassword' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["331"],"'imageName' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","Expected '!==' and instead saw '!='.","'goods' is assigned a value but never used.","'sendGoodsData' is assigned a value but never used.","'orderGoodsList' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'useParams' is defined but never used.","'CarGoods' is defined but never used.","'navigate' is assigned a value but never used.","'searchKeyword' is assigned a value but never used.","'goodsID' is assigned a value but never used.","'goodsName' is assigned a value but never used.","'description' is assigned a value but never used.","'goodsPrice' is assigned a value but never used.","'goodsQuantity' is assigned a value but never used.","'goodsImageName' is assigned a value but never used.","'queryGoodsData' is assigned a value but never used.","'addCarGoodsID' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'carCount', 'fetchList2', and 'updateCarCount'. Either include them or remove the dependency array. If 'updateCarCount' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["332"],"React Hook useEffect has missing dependencies: 'fetchList', 'nowToggle', and 'page'. Either include them or remove the dependency array.",["333"],"'useEffect' is defined but never used.","'ClearCarGoods' is defined but never used.","'memberOutData' is assigned a value but never used.","'clearGoodsData' is assigned a value but never used.","'Component' is defined but never used.","'Navigate' is defined but never used.","'searchName' is assigned a value but never used.","'memberInfo' is assigned a value but never used.","'seachNumberCount' is assigned a value but never used.","'changeSearchGoodsName' is assigned a value but never used.","'useState' is defined but never used.","'useRef' is defined but never used.","'setData' is defined but never used.","'BrowserRouter' is defined but never used.","'Link' is defined but never used.","'Routes' is defined but never used.","'Route' is defined but never used.","'useLocation' is defined but never used.","'loginMessage' is assigned a value but never used.","'isLogin' is assigned a value but never used.",["334"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",{"desc":"335","fix":"336"},[7704,7706],".",{"desc":"337","fix":"338"},{"desc":"339","fix":"340"},{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},"Update the dependencies array to be: [currentPageNo, sort, orderByItem, navigate, fetchList]",{"range":"345","text":"346"},"Update the dependencies array to be: [isLoginData, isLogin, navigate]",{"range":"347","text":"348"},"Update the dependencies array to be: [carCount, fetchList2, goodsVo, updateCarCount]",{"range":"349","text":"350"},"Update the dependencies array to be: [currentPageNo, fetchList, nowToggle, page, pageDataSize, searchInfo, toggle]",{"range":"351","text":"352"},"Update the dependencies array to be: [fetchList]",{"range":"353","text":"354"},[6432,6473],"[currentPageNo, sort, orderByItem, navigate, fetchList]",[3686,3707],"[isLoginData, isLogin, navigate]",[6504,6513],"[carCount, fetchList2, goodsVo, updateCarCount]",[6942,6988],"[currentPageNo, fetchList, nowToggle, page, pageDataSize, searchInfo, toggle]",[2311,2313],"[fetchList]"]